{
  "title": "Patrons de Conception",
  "description": "Patrons de conception courants dans le développement logiciel",
  "categories": [
    {
      "name": "Patrons de Création",
      "description": "Patrons qui traitent des mécanismes de création d'objets",
      "patterns": [
        {
          "name": "Singleton",
          "description": "Assure qu'une classe n'a qu'une seule instance et fournit un point d'accès global à celle-ci",
          "diagram": "Singleton.png",
          "use_cases": [
            "Connexions de base de données",
            "Paramètres de configuration",
            "Instances de journalisation"
          ],
          "implementation": {
            "code": "public class Singleton {\n    private static volatile Singleton instance;\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if (instance == null) {\n            synchronized(Singleton.class) {\n                if (instance == null) {\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}"
          }
        },
        {
          "name": "Factory Method",
          "description": "Définit une interface pour créer des objets tout en laissant les sous-classes décider de la classe à instancier",
          "diagram": "Factory Method.png",
          "use_cases": [
            "Création de documents dans un framework",
            "Éléments d'interface utilisateur multiplateforme",
            "Architectures de plugins"
          ],
          "implementation": {
            "code": "public interface Product {}\n\npublic interface Creator {\n    Product createProduct();\n}\n\npublic class ConcreteCreator implements Creator {\n    @Override\n    public Product createProduct() {\n        return new ConcreteProduct();\n    }\n}\n\npublic class ConcreteProduct implements Product {\n    // Implementation details\n}"
          }
        },
        {
          "name": "Abstract Factory",
          "description": "Fournit une interface pour créer des familles d'objets liés ou dépendants",
          "diagram": "Abstract Factory.png",
          "use_cases": [
            "Environnements d'interface utilisateur multiplateforme",
            "Couche d'accès à la base de données",
            "Multiples moteurs de rendu"
          ],
          "implementation": {
            "code": "public interface AbstractFactory {\n    ProductA createProductA();\n    ProductB createProductB();\n}\n\npublic class ConcreteFactory1 implements AbstractFactory {\n    @Override\n    public ProductA createProductA() {\n        return new ProductA1();\n    }\n\n    @Override\n    public ProductB createProductB() {\n        return new ProductB1();\n    }\n}\n\n// Similarly, define ProductA, ProductB, ProductA1, ProductB1 classes."
          }
        },
        {
          "name": "Builder",
          "description": "Sépare la construction d'un objet complexe de sa représentation",
          "diagram": "Builder.png",
          "use_cases": [
            "Construction d'objets complexes",
            "Objets avec de nombreux paramètres optionnels",
            "Objets immuables"
          ],
          "implementation": {
            "code": "public class Product {\n    private final String partA;\n    private final String partB;\n    private final String partC;\n\n    private Product(Builder builder) {\n        this.partA = builder.partA;\n        this.partB = builder.partB;\n        this.partC = builder.partC;\n    }\n\n    public static class Builder {\n        private String partA;\n        private String partB;\n        private String partC;\n\n        public Builder setPartA(String partA) {\n            this.partA = partA;\n            return this;\n        }\n\n        public Builder setPartB(String partB) {\n            this.partB = partB;\n            return this;\n        }\n\n        public Builder setPartC(String partC) {\n            this.partC = partC;\n            return this;\n        }\n\n        public Product build() {\n            return new Product(this);\n        }\n    }\n}"
          }
        },
        {
          "name": "Prototype",
          "description": "Crée de nouveaux objets en clonant une instance existante",
          "diagram": "Prototype.png",
          "use_cases": [
            "La création d'objets est coûteuse",
            "Configuration dynamique d'objets",
            "Éviter l'explosion des sous-classes"
          ],
          "implementation": {
            "code": "public class Prototype implements Cloneable {\n    private String field;\n\n    public Prototype(String field) {\n        this.field = field;\n    }\n\n    @Override\n    protected Prototype clone() throws CloneNotSupportedException {\n        return (Prototype) super.clone();\n    }\n}"
          }
        }
      ]
    },
    {
      "name": "Patrons Structurels",
      "description": "Patrons qui traitent de la composition des objets et de leurs relations",
      "patterns": [
        {
          "name": "Adapter",
          "description": "Convertit l'interface d'une classe en une autre interface attendue par les clients",
          "diagram": "Adapter.png",
          "use_cases": [
            "Intégration avec du code hérité",
            "Intégration de bibliothèques tierces",
            "Compatibilité avec plusieurs interfaces"
          ],
          "implementation": {
            "code": "public interface Target {\n    void request();\n}\n\npublic class Adaptee {\n    public void specificRequest() {\n        System.out.println(\"Called specificRequest()\");\n    }\n}\n\npublic class Adapter implements Target {\n    private Adaptee adaptee;\n\n    public Adapter(Adaptee adaptee) {\n        this.adaptee = adaptee;\n    }\n\n    @Override\n    public void request() {\n        adaptee.specificRequest();\n    }\n}"
          }
        },
        {
          "name": "Bridge",
          "description": "Sépare l'abstraction de l'implémentation afin qu'elles puissent varier indépendamment",
          "diagram": "Bridge.png",
          "use_cases": [
            "Applications multiplateformes",
            "Support de multiples variantes",
            "Séparation de l'interface et de l'implémentation"
          ],
          "implementation": {
            "code": "public interface Implementor {\n    void operationImpl();\n}\n\npublic class ConcreteImplementorA implements Implementor {\n    @Override\n    public void operationImpl() {\n        System.out.println(\"ConcreteImplementorA operationImpl\");\n    }\n}\n\npublic abstract class Abstraction {\n    protected Implementor implementor;\n\n    protected Abstraction(Implementor implementor) {\n        this.implementor = implementor;\n    }\n\n    public abstract void operation();\n}\n\npublic class RefinedAbstraction extends Abstraction {\n    public RefinedAbstraction(Implementor implementor) {\n        super(implementor);\n    }\n\n    @Override\n    public void operation() {\n        implementor.operationImpl();\n    }\n}"
          }
        },
        {
          "name": "Composite",
          "description": "Compose des objets en structures arborescentes pour représenter des hiérarchies partie-tout",
          "diagram": "Composite.png",
          "use_cases": [
            "Composants d'interface graphique",
            "Structures de systèmes de fichiers",
            "Hiérarchies organisationnelles"
          ],
          "implementation": {
            "code": "public abstract class Component {\n    public void add(Component component) { throw new UnsupportedOperationException(); }\n    public void remove(Component component) { throw new UnsupportedOperationException(); }\n    public Component getChild(int i) { throw new UnsupportedOperationException(); }\n    public abstract void operation();\n}\n\npublic class Leaf extends Component {\n    @Override\n    public void operation() {\n        System.out.println(\"Leaf operation\");\n    }\n}\n\npublic class Composite extends Component {\n    private List<Component> children = new ArrayList<>();\n\n    @Override\n    public void add(Component component) {\n        children.add(component);\n    }\n\n    @Override\n    public void remove(Component component) {\n        children.remove(component);\n    }\n\n    @Override\n    public Component getChild(int i) {\n        return children.get(i);\n    }\n\n    @Override\n    public void operation() {\n        for (Component component : children) {\n            component.operation();\n        }\n    }\n}"
          }
        },
        {
          "name": "Decorator",
          "description": "Ajoute dynamiquement des responsabilités supplémentaires aux objets",
          "diagram": "Decorator.png",
          "use_cases": [
            "Flux d'entrée/sortie",
            "Amélioration des composants UI",
            "Ajout dynamique de fonctionnalités"
          ],
          "implementation": {
            "code": "public interface Component {\n    void operation();\n}\n\npublic class ConcreteComponent implements Component {\n    @Override\n    public void operation() {\n        System.out.println(\"ConcreteComponent operation\");\n    }\n}\n\npublic abstract class Decorator implements Component {\n    protected Component component;\n\n    public Decorator(Component component) {\n        this.component = component;\n    }\n\n    @Override\n    public void operation() {\n        component.operation();\n    }\n}\n\npublic class ConcreteDecorator extends Decorator {\n    public ConcreteDecorator(Component component) {\n        super(component);\n    }\n\n    @Override\n    public void operation() {\n        super.operation();\n        addedBehavior();\n    }\n\n    private void addedBehavior() {\n        System.out.println(\"Added Behavior\");\n    }\n}"
          }
        },
        {
          "name": "Facade",
          "description": "Fournit une interface unifiée à un ensemble d'interfaces dans un sous-système",
          "diagram": "Facade.png",
          "use_cases": [
            "Simplification de sous-systèmes complexes",
            "Enrobage de bibliothèques",
            "Unification d'API"
          ],
          "implementation": {
            "code": "public class SubsystemA {\n    public void operationA() {\n        System.out.println(\"SubsystemA operation\");\n    }\n}\n\npublic class SubsystemB {\n    public void operationB() {\n        System.out.println(\"SubsystemB operation\");\n    }\n}\n\npublic class Facade {\n    private SubsystemA subsystemA = new SubsystemA();\n    private SubsystemB subsystemB = new SubsystemB();\n\n    public void operation() {\n        subsystemA.operationA();\n        subsystemB.operationB();\n    }\n}"
          }
        },
        {
          "name": "Flyweight",
          "description": "Utilise le partage pour supporter efficacement un grand nombre d'objets de granularité fine",
          "diagram": "Flyweight.png",
          "use_cases": [
            "Mise en forme de texte",
            "Gestion d'objets de jeu",
            "Rendu de caractères"
          ],
          "implementation": {
            "code": "public interface Flyweight {\n    void operation(String extrinsicState);\n}\n\npublic class ConcreteFlyweight implements Flyweight {\n    private String intrinsicState;\n\n    public ConcreteFlyweight(String intrinsicState) {\n        this.intrinsicState = intrinsicState;\n    }\n\n    @Override\n    public void operation(String extrinsicState) {\n        System.out.println(\"Intrinsic State: \" + intrinsicState + \", Extrinsic State: \" + extrinsicState);\n    }\n}\n\npublic class FlyweightFactory {\n    private Map<String, Flyweight> flyweights = new HashMap<>();\n\n    public Flyweight getFlyweight(String key) {\n        if (!flyweights.containsKey(key)) {\n            flyweights.put(key, new ConcreteFlyweight(key));\n        }\n        return flyweights.get(key);\n    }\n}"
          }
        },
        {
          "name": "Proxy",
          "description": "Fournit un substitut ou un intermédiaire pour un autre objet",
          "diagram": "Proxy.png",
          "use_cases": [
            "Chargement paresseux",
            "Contrôle d'accès",
            "Accès à des ressources distantes"
          ],
          "implementation": {
            "code": "public interface Subject {\n    void request();\n}\n\npublic class RealSubject implements Subject {\n    @Override\n    public void request() {\n        System.out.println(\"RealSubject request\");\n    }\n}\n\npublic class Proxy implements Subject {\n    private RealSubject realSubject;\n\n    @Override\n    public void request() {\n        if (realSubject == null) {\n            realSubject = new RealSubject();\n        }\n        realSubject.request();\n    }\n}"
          }
        }
      ]
    },
    {
      "name": "Patrons Comportementaux",
      "description": "Patrons qui traitent de la communication entre objets",
      "patterns": [
        {
          "name": "Observer",
          "description": "Définit une dépendance un-à-plusieurs entre objets",
          "diagram": "Observer.png",
          "use_cases": [
            "Gestion d'événements",
            "Mises à jour de l'interface utilisateur",
            "Systèmes de publication/abonnement"
          ],
          "implementation": {
            "code": "public interface Observer {\n    void update(String state);\n}\n\npublic class ConcreteObserver implements Observer {\n    private String observerState;\n\n    @Override\n    public void update(String state) {\n        observerState = state;\n        System.out.println(\"Observer state updated to \" + observerState);\n    }\n}\n\npublic class Subject {\n    private List<Observer> observers = new ArrayList<>();\n    private String state;\n\n    public void attach(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void detach(Observer observer) {\n        observers.remove(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update(state);\n        }\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        notifyObservers();\n    }\n}"
          }
        },
        {
          "name": "Strategy",
          "description": "Définit une famille d'algorithmes et les rend interchangeables",
          "diagram": "Strategy.png",
          "use_cases": [
            "Traitement des paiements",
            "Algorithmes de tri",
            "Stratégies de validation"
          ],
          "implementation": {
            "code": "public interface Strategy {\n    void execute();\n}\n\npublic class ConcreteStrategyA implements Strategy {\n    @Override\n    public void execute() {\n        System.out.println(\"Strategy A execution\");\n    }\n}\n\npublic class Context {\n    private Strategy strategy;\n\n    public Context(Strategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public void executeStrategy() {\n        strategy.execute();\n    }\n}"
          }
        },
        {
          "name": "Template Method",
          "description": "Définit la structure d'un algorithme, laissant aux sous-classes le soin de remplacer certaines étapes",
          "diagram": "Template Method.png",
          "use_cases": [
            "Opérations de framework",
            "Chaînes de traitement de données",
            "Génération de documents"
          ],
          "implementation": {
            "code": "public abstract class AbstractClass {\n    public final void templateMethod() {\n        primitiveOperation1();\n        primitiveOperation2();\n    }\n\n    protected abstract void primitiveOperation1();\n    protected abstract void primitiveOperation2();\n}\n\npublic class ConcreteClass extends AbstractClass {\n    @Override\n    protected void primitiveOperation1() {\n        System.out.println(\"Primitive Operation 1\");\n    }\n\n    @Override\n    protected void primitiveOperation2() {\n        System.out.println(\"Primitive Operation 2\");\n    }\n}"
          }
        },
        {
          "name": "State",
          "description": "Permet à un objet de modifier son comportement lorsque son état interne change",
          "diagram": "State.png",
          "use_cases": [
            "Gestion de flux de travail",
            "États de jeu",
            "Traitement de commandes"
          ],
          "implementation": {
            "code": "public interface State {\n    void handle(Context context);\n}\n\npublic class ConcreteStateA implements State {\n    @Override\n    public void handle(Context context) {\n        System.out.println(\"State A handling\");\n        context.setState(new ConcreteStateB());\n    }\n}\n\npublic class ConcreteStateB implements State {\n    @Override\n    public void handle(Context context) {\n        System.out.println(\"State B handling\");\n        context.setState(new ConcreteStateA());\n    }\n}\n\npublic class Context {\n    private State state;\n\n    public Context(State state) {\n        this.state = state;\n    }\n\n    public void setState(State state) {\n        this.state = state;\n    }\n\n    public void request() {\n        state.handle(this);\n    }\n}"
          }
        },
        {
          "name": "Visitor",
          "description": "Représente une opération à effectuer sur les éléments d'une structure d'objet",
          "diagram": "Visitor.png",
          "use_cases": [
            "Modèle d'objet de document",
            "Opérations de compilateur",
            "Parcours de structure d'objet"
          ],
          "implementation": {
            "code": "public interface Visitor {\n    void visit(ElementA element);\n    void visit(ElementB element);\n}\n\npublic interface Element {\n    void accept(Visitor visitor);\n}\n\npublic class ElementA implements Element {\n    @Override\n    public void accept(Visitor visitor) {\n        visitor.visit(this);\n    }\n}\n\npublic class ElementB implements Element {\n    @Override\n    public void accept(Visitor visitor) {\n        visitor.visit(this);\n    }\n}\n\npublic class ConcreteVisitor implements Visitor {\n    @Override\n    public void visit(ElementA element) {\n        System.out.println(\"Visited ElementA\");\n    }\n\n    @Override\n    public void visit(ElementB element) {\n        System.out.println(\"Visited ElementB\");\n    }\n}"
          }
        }
      ]
    }
  ],
  "best_practices": {
    "selection_criteria": [
      "Contexte du problème",
      "Exigences de flexibilité",
      "Considérations de maintenance",
      "Impact sur la performance"
    ],
    "implementation_guidelines": [
      "Restez simple",
      "Privilégiez la composition sur l'héritage",
      "Programmez par interface",
      "Favorisez un couplage faible"
    ],
    "common_pitfalls": [
      "Sur-ingénierie",
      "Mauvais usage du patron",
      "Abstraction prématurée",
      "Implémentation rigide"
    ]
  },
  "relationships": {
    "commonly_combined": [
      {
        "patterns": [
          "Factory Method",
          "Singleton"
        ],
        "use_case": "Gestion de la création de ressources partagées"
      },
      {
        "patterns": [
          "Composite",
          "Iterator"
        ],
        "use_case": "Parcours de structures complexes"
      },
      {
        "patterns": [
          "Observer",
          "Mediator"
        ],
        "use_case": "Systèmes de gestion d'événements"
      }
    ]
  }
}
