{
  "title": "SOLID Principles",
  "description": "The five fundamental principles of object-oriented programming and design",
  "principles": [
    {
      "name": "Single Responsibility Principle (SRP)",
      "acronym": "S",
      "definition": "A class should have only one reason to change",
      "key_concept": "Each class should have only one job or responsibility",
      "examples": [
        {
          "bad_practice": {
            "title": "Violation of SRP",
            "code": "public class UserService {\n    public void saveUser(User user) {\n        // Save user to database\n    }\n    \n    public void sendEmail(User user) {\n        // Send welcome email\n    }\n    \n    public void generateReport(User user) {\n        // Generate user report\n    }\n}"
          },
          "good_practice": {
            "title": "Following SRP",
            "code": "public class UserService {\n    private EmailService emailService;\n    private ReportService reportService;\n    \n    public void saveUser(User user) {\n        // Save user to database\n    }\n}\n\npublic class EmailService {\n    public void sendEmail(User user) {\n        // Send welcome email\n    }\n}\n\npublic class ReportService {\n    public void generateReport(User user) {\n        // Generate user report\n    }\n}"
          }
        }
      ],
      "benefits": [
        "Easier to understand and maintain",
        "Better testability",
        "Reduced coupling",
        "Easier to modify without affecting other parts"
      ],
      "indicators_of_violation": [
        "Class has multiple unrelated methods",
        "Changes to one feature require modifying multiple classes",
        "Class has multiple reasons to change"
      ]
    },
    {
      "name": "Open-Closed Principle (OCP)",
      "acronym": "O",
      "definition": "Software entities should be open for extension but closed for modification",
      "key_concept": "Extend functionality by adding new code rather than changing existing code",
      "examples": [
        {
          "bad_practice": {
            "title": "Violation of OCP",
            "code": "public class PaymentProcessor {\n    public void processPayment(String paymentType) {\n        if (paymentType.equals(\"CREDIT_CARD\")) {\n            // Process credit card\n        } else if (paymentType.equals(\"PAYPAL\")) {\n            // Process PayPal\n        }\n        // Adding new payment type requires modifying this class\n    }\n}"
          },
          "good_practice": {
            "title": "Following OCP",
            "code": "public interface PaymentProcessor {\n    void processPayment();\n}\n\npublic class CreditCardProcessor implements PaymentProcessor {\n    public void processPayment() {\n        // Process credit card\n    }\n}\n\npublic class PayPalProcessor implements PaymentProcessor {\n    public void processPayment() {\n        // Process PayPal\n    }\n}\n\n// New payment types can be added without modifying existing code"
          }
        }
      ],
      "benefits": [
        "New functionality can be added without changing existing code",
        "Reduced risk of bugs in existing code",
        "Easier to maintain and test",
        "Better code organization"
      ],
      "indicators_of_violation": [
        "Frequent modifications to existing classes when adding features",
        "Large if/else or switch statements",
        "Tight coupling between classes"
      ]
    },
    {
      "name": "Liskov Substitution Principle (LSP)",
      "acronym": "L",
      "definition": "Subtypes must be substitutable for their base types without altering the correctness of the program",
      "key_concept": "Derived classes must be usable through their base class interface without the client knowing the difference",
      "examples": [
        {
          "bad_practice": {
            "title": "Violation of LSP",
            "code": "public class Bird {\n    public void fly() { }\n}\n\npublic class Penguin extends Bird {\n    @Override\n    public void fly() {\n        throw new UnsupportedOperationException(\"Penguins can't fly\");\n    }\n}"
          },
          "good_practice": {
            "title": "Following LSP",
            "code": "public interface FlyingBird {\n    void fly();\n}\n\npublic class Bird { }\n\npublic class Sparrow extends Bird implements FlyingBird {\n    public void fly() { }\n}\n\npublic class Penguin extends Bird {\n    // No fly method\n}"
          }
        }
      ],
      "benefits": [
        "Code reusability",
        "Maintainable inheritance hierarchies",
        "Predictable behavior of base classes",
        "Better abstraction"
      ],
      "indicators_of_violation": [
        "Empty method implementations",
        "Throwing exceptions in subclass methods",
        "Type checking in methods"
      ]
    },
    {
      "name": "Interface Segregation Principle (ISP)",
      "acronym": "I",
      "definition": "Clients should not be forced to depend on interfaces they do not use",
      "key_concept": "Many specific interfaces are better than one general-purpose interface",
      "examples": [
        {
          "bad_practice": {
            "title": "Violation of ISP",
            "code": "public interface Worker {\n    void work();\n    void eat();\n    void sleep();\n}\n\npublic class Robot implements Worker {\n    public void work() { }\n    public void eat() { throw new UnsupportedOperationException(); }\n    public void sleep() { throw new UnsupportedOperationException(); }\n}"
          },
          "good_practice": {
            "title": "Following ISP",
            "code": "public interface Workable {\n    void work();\n}\n\npublic interface Eatable {\n    void eat();\n}\n\npublic interface Sleepable {\n    void sleep();\n}\n\npublic class Human implements Workable, Eatable, Sleepable {\n    public void work() { }\n    public void eat() { }\n    public void sleep() { }\n}\n\npublic class Robot implements Workable {\n    public void work() { }\n}"
          }
        }
      ],
      "benefits": [
        "Better abstraction",
        "More focused interfaces",
        "Easier to implement and maintain",
        "Reduced coupling"
      ],
      "indicators_of_violation": [
        "Large interfaces with many methods",
        "Classes implementing methods they don't need",
        "Interface methods throwing UnsupportedOperationException"
      ]
    },
    {
      "name": "Dependency Inversion Principle (DIP)",
      "acronym": "D",
      "definition": "High-level modules should not depend on low-level modules. Both should depend on abstractions",
      "key_concept": "Depend on abstractions rather than concrete implementations",
      "examples": [
        {
          "bad_practice": {
            "title": "Violation of DIP",
            "code": "public class UserService {\n    private MySQLDatabase database = new MySQLDatabase();\n    \n    public void saveUser(User user) {\n        database.save(user);\n    }\n}"
          },
          "good_practice": {
            "title": "Following DIP",
            "code": "public interface Database {\n    void save(User user);\n}\n\npublic class UserService {\n    private final Database database;\n    \n    public UserService(Database database) {\n        this.database = database;\n    }\n    \n    public void saveUser(User user) {\n        database.save(user);\n    }\n}"
          }
        }
      ],
      "benefits": [
        "Loose coupling",
        "Easier to test (can use mock implementations)",
        "More flexible and reusable code",
        "Easier to change implementations"
      ],
      "indicators_of_violation": [
        "Direct instantiation of dependencies",
        "Tight coupling to concrete classes",
        "Difficulty in unit testing"
      ]
    }
  ],
  "practical_applications": {
    "spring_framework": [
      {
        "principle": "SRP",
        "example": "Using @Service, @Repository, and @Controller annotations to separate concerns"
      },
      {
        "principle": "OCP",
        "example": "Using interfaces and @Autowired for dependency injection"
      },
      {
        "principle": "DIP",
        "example": "Spring IoC container and dependency injection"
      }
    ],
    "design_patterns": [
      {
        "principle": "OCP",
        "patterns": ["Strategy", "Template Method"]
      },
      {
        "principle": "DIP",
        "patterns": ["Factory", "Abstract Factory"]
      }
    ]
  },
  "common_misconceptions": [
    {
      "principle": "SRP",
      "misconception": "A class should only have one method",
      "clarification": "The principle is about having one responsibility or reason to change, not about the number of methods"
    },
    {
      "principle": "OCP",
      "misconception": "Never modify existing code",
      "clarification": "You can modify code to fix bugs or improve implementation, but new features should be added through extension"
    }
  ],
  "implementation_guidelines": {
    "when_to_apply": [
      "During initial design",
      "When refactoring existing code",
      "When adding new features",
      "When facing maintenance issues"
    ],
    "considerations": [
      "Don't over-engineer",
      "Balance between principles and pragmatism",
      "Consider team experience and project constraints",
      "Start with the most relevant principle for your problem"
    ]
  }
}