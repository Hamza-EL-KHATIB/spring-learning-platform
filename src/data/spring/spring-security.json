{
  "id": "spring-security",
  "title": "Spring Security",
  "topics": [
    {
      "title": "Core Concepts",
      "multi-content": [
        {
          "title": "Authentication vs. Authorization",
          "multi-content": [
            "Authentication: The process of verifying who a user is (identity verification)",
            "Authorization: The process of determining what a user is allowed to do (permission verification)"
          ]
        },
        {
          "title": "Key Components",
          "multi-content": [
            {
              "title": "UserDetailsService",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Core interface that loads user-specific data",
                    "Used by Spring Security's authentication framework",
                    "Implements method: `UserDetails loadUserByUsername(String username)`",
                    "Custom implementations typically connect to user repositories (DB, LDAP, etc.)"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Custom UserDetailsService Implementation",
                      "simple-content": "@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n    @Autowired\n    private UserRepository userRepository;\n    \n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\n            \n        return new org.springframework.security.core.userdetails.User(\n            user.getUsername(),\n            user.getPassword(),\n            user.getAuthorities()\n        );\n    }\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "PasswordEncoder",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Interface for encoding passwords and verifying encoded passwords",
                    "Common implementations include:",
                    "BCryptPasswordEncoder",
                    "Pbkdf2PasswordEncoder",
                    "SCryptPasswordEncoder"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Password Encoder Bean",
                      "simple-content": "@Bean\npublic PasswordEncoder passwordEncoder() {\n    return new BCryptPasswordEncoder(12); // Strength factor of 12\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "SecurityContext",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Holds the current authentication details",
                    "Accessible via `SecurityContextHolder.getContext()`",
                    "Stores the user's authentication token after successful login"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Accessing Security Context",
                      "simple-content": "Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\nString currentUsername = authentication.getName();"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "Security Configuration",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "Modern Spring Security configuration example:"
            },
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Security Configuration Class",
                  "simple-content": "@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -> authz\n                .requestMatchers(\"/public/**\").permitAll()\n                .requestMatchers(\"/api/admin/**\").hasRole(\"ADMIN\")\n                .anyRequest().authenticated()\n            )\n            .formLogin(form -> form\n                .loginPage(\"/login\")\n                .permitAll()\n            )\n            .csrf(csrf -> csrf.disable()); // Only for APIs, not recommended for web applications\n            \n        return http.build();\n    }\n    \n    @Bean\n    public UserDetailsService userDetailsService() {\n        UserDetails user = User.withDefaultPasswordEncoder()\n            .username(\"user\")\n            .password(\"password\")\n            .roles(\"USER\")\n            .build();\n            \n        UserDetails admin = User.withDefaultPasswordEncoder()\n            .username(\"admin\")\n            .password(\"password\")\n            .roles(\"ADMIN\")\n            .build();\n            \n        return new InMemoryUserDetailsManager(user, admin);\n    }\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Method Security",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Spring Security provides annotations for method-level security:"
        },
        {
          "title": "Annotations",
          "multi-content": [
            {
              "title": "@PreAuthorize",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Executes before the method call",
                    "Uses Spring Expression Language (SpEL)",
                    "Access to method arguments"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "PreAuthorize Example",
                      "simple-content": "@PreAuthorize(\"hasRole('ADMIN') or #username == authentication.principal.username\")\npublic User getUserDetails(String username) {\n    return userRepository.findByUsername(username);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@PostAuthorize",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Executes after the method call",
                    "Can access the method's return value",
                    "Uses `returnObject` to refer to return value"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "PostAuthorize Example",
                      "simple-content": "@PostAuthorize(\"returnObject.username == authentication.principal.username\")\npublic User getUser(Long id) {\n    return userRepository.findById(id);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@Secured",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Simpler annotation that checks for specific roles",
                    "No SpEL support",
                    "Less flexible but easier to read"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Secured Example",
                      "simple-content": "@Secured(\"ROLE_ADMIN\")\npublic void deleteUser(Long userId) {\n    userRepository.deleteById(userId);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@RolesAllowed",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Java standard equivalent to @Secured",
                    "Requires additional configuration"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "RolesAllowed Example",
                      "simple-content": "@RolesAllowed({\"ROLE_ADMIN\", \"ROLE_SUPER_ADMIN\"})\npublic List<User> getAllUsers() {\n    return userRepository.findAll();\n}"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "JWT Implementation",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "JSON Web Token (JWT) is commonly used for stateless authentication in REST APIs:"
        },
        {
          "title": "Structure",
          "multi-content": [
            "Header: Algorithm & token type",
            "Payload: Claims (user data, permissions)",
            "Signature: Verification signature"
          ]
        },
        {
          "title": "Implementation with Spring Security",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "JWT Security Configuration",
                  "simple-content": "@Configuration\n@EnableWebSecurity\npublic class JwtSecurityConfig {\n    \n    @Autowired\n    private JwtTokenProvider tokenProvider;\n    \n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf(csrf -> csrf.disable())\n            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n            .authorizeHttpRequests(authz -> authz\n                .requestMatchers(\"/auth/**\").permitAll()\n                .anyRequest().authenticated()\n            )\n            .addFilterBefore(new JwtTokenFilter(tokenProvider), UsernamePasswordAuthenticationFilter.class);\n            \n        return http.build();\n    }\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "OAuth2 and OpenID Connect",
      "multi-content": [
        {
          "title": "OAuth2 Flow Types",
          "multi-content": [
            "Authorization Code: Most secure for server applications",
            "Implicit: For browser-based applications",
            "Resource Owner Password Credentials: Direct username/password (legacy)",
            "Client Credentials: For service-to-service communication"
          ]
        },
        {
          "title": "Spring Boot OAuth2 Client Configuration",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Application Properties",
                  "simple-content": "# application.properties\nspring.security.oauth2.client.registration.github.client-id=client-id\nspring.security.oauth2.client.registration.github.client-secret=client-secret"
                },
                {
                  "title": "OAuth2 Security Config",
                  "simple-content": "@Configuration\n@EnableWebSecurity\npublic class OAuth2SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -> authz\n                .anyRequest().authenticated()\n            )\n            .oauth2Login(oauth2 -> oauth2\n                .loginPage(\"/login\")\n            );\n            \n        return http.build();\n    }\n}"
                }
              ]
            }
          ]
        },
        {
          "title": "OpenID Connect",
          "multi-content": [
            "Extension of OAuth2 for authentication",
            "Provides standardized user information",
            "Returns ID token with user details"
          ]
        }
      ]
    },
    {
      "title": "Common Security Patterns",
      "multi-content": [
        {
          "title": "CSRF Protection",
          "multi-content": [
            {
              "title": "Description",
              "multi-content": [
                "Cross-Site Request Forgery protection",
                "Implemented by default in Spring Security",
                "Uses tokens to verify legitimate requests"
              ]
            }
          ]
        },
        {
          "title": "XSS Prevention",
          "multi-content": [
            {
              "title": "Description",
              "multi-content": [
                "Cross-Site Scripting protection",
                "Escape output data",
                "Content Security Policy headers"
              ]
            }
          ]
        },
        {
          "title": "Cross-Origin Resource Sharing (CORS)",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "CORS Configuration",
                  "simple-content": "@Bean\npublic CorsConfigurationSource corsConfigurationSource() {\n    CorsConfiguration configuration = new CorsConfiguration();\n    configuration.setAllowedOrigins(Arrays.asList(\"https://example.com\"));\n    configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\"));\n    configuration.setAllowCredentials(true);\n    \n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    source.registerCorsConfiguration(\"/**\", configuration);\n    return source;\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Testing Security",
      "multi-content": [
        {
          "title": "Unit Testing",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Security Test Example",
                  "simple-content": "@WebMvcTest(UserController.class)\n@WithMockUser(roles = \"ADMIN\")\npublic class UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n    \n    @Test\n    public void shouldGetUserDetailsWhenAuthorized() throws Exception {\n        mockMvc.perform(get(\"/api/users/1\"))\n               .andExpect(status().isOk());\n    }\n    \n    @Test\n    @WithAnonymousUser\n    public void shouldDenyAccessWhenNotAuthenticated() throws Exception {\n        mockMvc.perform(get(\"/api/users/1\"))\n               .andExpect(status().isUnauthorized());\n    }\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Best Practices",
      "multi-content": [
        {
          "title": "Security Recommendations",
          "multi-content": [
            "Use bcrypt for password storage",
            "Implement proper authentication for all endpoints",
            "Apply principle of least privilege",
            "Enable HTTPS for all communications",
            "Keep security dependencies updated",
            "Implement proper logging for security events",
            "Use method security for fine-grained control",
            "Test security implementation thoroughly",
            "Don't store sensitive data in JWT tokens",
            "Set appropriate token expiration times"
          ]
        }
      ]
    },
    {
      "title": "Common Interview Questions",
      "multi-content": [
        {
          "title": "Questions",
          "multi-content": [
            "What's the difference between authentication and authorization in Spring Security?",
            "How would you implement JWT authentication in Spring Boot?",
            "Explain the security filter chain in Spring Security.",
            "What are the different ways to secure methods in Spring?",
            "How does OAuth2 integration work in Spring Security?",
            "How would you handle CORS in a Spring Security application?",
            "What's the role of UserDetailsService in Spring Security?",
            "How would you implement role-based access control?",
            "What's the difference between @Secured and @PreAuthorize?",
            "How would you test a secured REST API?"
          ]
        }
      ]
    },
    {
      "title": "Authentication & Authorization Basics",
      "multi-content": [
        {
          "title": "Difference between authentication and authorization",
          "simple-content": "Authentication verifies the identity of a user (who they are), while authorization determines what resources an authenticated user can access (what they can do). Spring Security handles these separately with authentication managers and access decision managers."
        },
        {
          "title": "Spring Security's authentication workflow",
          "simple-content": "The authentication process flows through security filters. First, credentials are extracted from the request, then passed to AuthenticationManager, which delegates to AuthenticationProviders. Once authenticated, the SecurityContext stores the authentication object for the current thread."
        },
        {
          "title": "Authentication methods supported by Spring Security",
          "simple-content": "Spring Security supports form-based authentication, HTTP Basic/Digest authentication, X.509 certificate authentication, OAuth2/OpenID Connect, LDAP authentication, and custom authentication methods."
        }
      ]
    },
    {
      "title": "Configuration & Implementation",
      "multi-content": [
        {
          "title": "Configuring Spring Security in a modern Spring Boot application",
          "simple-content": "Modern configuration uses a SecurityFilterChain bean with functional configuration instead of extending WebSecurityConfigurerAdapter (which is deprecated). Configuration includes defining authorization rules, authentication methods, CSRF settings, and other security features."
        },
        {
          "title": "Security Filter Chain explanation",
          "simple-content": "The Security Filter Chain is a series of servlet filters that process security-related aspects of HTTP requests. Filters handle tasks like authentication, authorization, session management, CSRF protection, etc. Each filter has a specific responsibility and they execute in a defined order."
        },
        {
          "title": "Implementing method-level security",
          "simple-content": "Enable method security with `@EnableMethodSecurity` (or the older `@EnableGlobalMethodSecurity`) and use annotations like `@PreAuthorize`, `@PostAuthorize`, `@Secured`, or `@RolesAllowed` on service methods to enforce security rules."
        }
      ]
    },
    {
      "title": "Token-Based Authentication",
      "multi-content": [
        {
          "title": "Implementing JWT authentication",
          "simple-content": "Implement JWT by creating a custom filter that validates JWT tokens, extracts user details and authorities, and sets the SecurityContext. Configure this filter before UsernamePasswordAuthenticationFilter and implement a stateless session policy."
        },
        {
          "title": "Differences between OAuth2 and JWT",
          "simple-content": "OAuth2 is an authorization protocol that defines how third-party applications can access resources, while JWT is a token format. OAuth2 can use JWT as a token format but isn't limited to it. OAuth2 involves authorization servers, while JWT is self-contained."
        },
        {
          "title": "Handling JWT token expiration and renewal",
          "simple-content": "For token renewal, implement a refresh token mechanism where clients can exchange a refresh token for a new access token. For expiration, validate token expiry during authentication and return 401 Unauthorized when tokens expire."
        }
      ]
    },
    {
      "title": "OAuth2 & Identity Management",
      "multi-content": [
        {
          "title": "Spring Security integration with OAuth2 and OpenID Connect",
          "simple-content": "Spring Security provides built-in support via the Spring Security OAuth2 modules. For OAuth2 clients, use `@EnableOAuth2Client` and configure client registration. For resource servers, use `@EnableResourceServer` and configure token validation."
        },
        {
          "title": "Integration between Spring Security and Keycloak",
          "simple-content": "Integration involves adding Keycloak adapter dependencies and configuring the application to use Keycloak as an OAuth2/OpenID provider. Spring Security will delegate authentication to Keycloak and use tokens for authorization."
        },
        {
          "title": "SAML vs OAuth2",
          "simple-content": "SAML (Security Assertion Markup Language) is an XML-based standard for exchanging authentication and authorization data. Unlike OAuth2, SAML is primarily used for enterprise SSO rather than API authorization. It uses XML instead of JSON and is more complex but provides rich identity information."
        }
      ]
    },
    {
      "title": "Cross-Cutting Security Concerns",
      "multi-content": [
        {
          "title": "Handling CORS in a Spring Security application",
          "simple-content": "Configure CORS globally by defining a `CorsConfigurationSource` bean, or at controller level using `@CrossOrigin`. Spring Security integrates with this configuration via the `.cors()` method in security configuration."
        },
        {
          "title": "CSRF protection in Spring Security",
          "simple-content": "CSRF (Cross-Site Request Forgery) protection prevents attackers from making unauthorized requests on behalf of users. Spring Security implements this by generating tokens that must be included in forms and non-GET requests. It's enabled by default with `.csrf()` configuration."
        },
        {
          "title": "Protection against XSS attacks",
          "simple-content": "Protect against XSS (Cross-Site Scripting) by:\n\n- Using Spring's automatic output encoding in templates\n- Implementing Content-Security-Policy headers\n- Validating and sanitizing input data\n- Setting appropriate cookie security flags (HttpOnly, Secure)\n- Using Spring Security's header defaults with `.headers()` configuration"
        }
      ]
    },
    {
      "title": "Advanced Topics",
      "multi-content": [
        {
          "title": "Spring Security in microservices architecture",
          "simple-content": "In microservices, implement OAuth2 with JWT tokens for stateless authentication across services. Use OAuth2 Authorization Server for centralized authentication, and configure each service as a Resource Server. Propagate tokens between services and validate them independently."
        },
        {
          "title": "Security considerations for RESTful APIs",
          "simple-content": "Key considerations include using HTTPS, implementing proper authentication (typically OAuth2 or JWT), applying authorization for all endpoints, securing sensitive data, implementing rate limiting, validating all inputs, and handling errors securely."
        },
        {
          "title": "Role-based vs permission-based security",
          "simple-content": "Role-based security assigns users to roles and grants access based on those roles (using hasRole() expressions). Permission-based security is more granular, assigning specific permissions to users and checking those (using hasAuthority() expressions). The latter is more flexible but more complex to manage."
        }
      ]
    }
  ]
}
