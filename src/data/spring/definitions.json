{
  "id": "spring-definitions-en",
  "title": "Spring Interview Definitions",
  "topics": [
    {
      "title": "Inversion of Control (IoC)",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "A design principle where the control of object creation and dependency management is delegated to an external container, enhancing modularity and testability."
        }
      ]
    },
    {
      "title": "Dependency Injection (DI)",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "A pattern in which an object's dependencies are provided by an external source (usually the IoC container) rather than the object instantiating them itself, promoting loose coupling."
        }
      ]
    },
    {
      "title": "IoC Container",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "The core component of the Spring framework that manages the lifecycle, configuration, and dependency injection of beans. It instantiates and wires application objects based on configuration metadata."
        }
      ]
    },
    {
      "title": "Bean",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "An object that is instantiated, configured, and managed by the Spring IoC container. Beans can be defined using XML, annotations, or Java configuration."
        }
      ]
    },
    {
      "title": "Bean Lifecycle",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "The complete process a Spring bean undergoes—from instantiation and dependency injection to initialization and eventual destruction—with opportunities for custom behavior at various stages."
        }
      ]
    },
    {
      "title": "ApplicationContext vs BeanFactory",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "BeanFactory provides basic dependency injection capabilities, whereas ApplicationContext adds enterprise features like event propagation, internationalization, and resource management."
        }
      ]
    },
    {
      "title": "Autowiring",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "A feature in Spring that automatically resolves and injects bean dependencies by type, name, or constructor, reducing the need for explicit configuration."
        }
      ]
    },
    {
      "title": "Bean Scopes",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "Defines the lifecycle and visibility of a bean within the container. Common scopes include singleton, prototype, request, session, and application."
        }
      ]
    },
    {
      "title": "Aspect-Oriented Programming (AOP)",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "A programming paradigm that separates cross-cutting concerns (like logging, security, or transaction management) from business logic using aspects, advices, join points, and pointcuts."
        }
      ]
    },
    {
      "title": "Spring Boot",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "An opinionated framework built on top of Spring that simplifies application development by providing auto-configuration, starter dependencies, and embedded servers, significantly reducing boilerplate configuration."
        }
      ]
    },
    {
      "title": "Transaction Management in Spring",
      "multi-content": [
        {
          "title": "Definition",
          "simple-content": "A mechanism for managing transactions declaratively or programmatically to ensure data consistency and integrity, integrating with various transaction managers like JTA, JDBC, or Hibernate."
        }
      ]
    },
    {
      "title": "code_examples",
      "multi-content": [
        {
          "title": "Dependency Injection",
          "simple-content": "@Service\npublic class UserService {\n    private final UserRepository userRepository;\n    \n    @Autowired\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n    \n    public User findUserById(Long id) {\n        return userRepository.findById(id).orElseThrow();\n    }\n}"
        },
        {
          "title": "Bean Definition",
          "simple-content": "@Configuration\npublic class AppConfig {\n    \n    @Bean\n    public UserService userService(UserRepository userRepository) {\n        return new UserService(userRepository);\n    }\n    \n    @Bean\n    public TransactionManager transactionManager(DataSource dataSource) {\n        DataSourceTransactionManager txManager = new DataSourceTransactionManager();\n        txManager.setDataSource(dataSource);\n        return txManager;\n    }\n}"
        }
      ]
    }
  ]
}