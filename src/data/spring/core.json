{
  "title": "Spring Framework Core",
  "topics": [
    {
      "id": "ioc-container",
      "title": "IoC Container & Dependency Injection",
      "description": "This fundamental concept of Spring shifts control of object creation and dependency management from application code to the container, promoting loose coupling, modular design, and easier testing.",
      "concepts": [
        {
          "name": "Inversion of Control",
          "description": "Inversion of Control (IoC) is a design principle where the control over object creation and lifecycle is transferred from the application code to the Spring container. This inversion makes the system more decoupled and easier to maintain.",
          "benefits": [
            "Loose coupling",
            "Better testability",
            "Modular design",
            "Easier configuration management"
          ]
        },
        {
          "name": "Dependency Injection",
          "types": [
            {
              "type": "Constructor Injection",
              "description": "Dependencies are injected via the constructor, ensuring that all required dependencies are provided at creation time. This supports immutability and makes dependency requirements explicit.",
              "example": {
                "code": "@Component\npublic class UserService {\n    private final UserRepository userRepository;\n\n    @Autowired\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n}",
                "advantages": [
                  "Ensures required dependencies are provided",
                  "Supports immutability",
                  "Clear dependency requirements"
                ]
              }
            },
            {
              "type": "Setter Injection",
              "description": "Dependencies are provided through setter methods after object instantiation, offering flexibility to change dependencies later and supporting optional dependencies.",
              "example": {
                "code": "@Component\npublic class UserService {\n    private UserRepository userRepository;\n\n    @Autowired\n    public void setUserRepository(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n}",
                "advantages": [
                  "Allows optional dependencies",
                  "Provides flexibility in dependency management",
                  "Enables runtime modification of dependencies"
                ]
              }
            },
            {
              "type": "Field Injection",
              "description": "Dependencies are injected directly into class fields using reflection. This approach reduces boilerplate code but can obscure the required dependencies and complicate testing.",
              "example": {
                "code": "@Component\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n}",
                "advantages": [
                  "Less boilerplate code",
                  "Simpler to write"
                ],
                "disadvantages": [
                  "Harder to test",
                  "Cannot declare fields as final",
                  "Hidden dependencies"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "bean-lifecycle",
      "title": "Bean Lifecycle",
      "description": "A comprehensive overview of the entire lifecycle of Spring-managed beans, detailing every phase from definition and instantiation to initialization and eventual destruction, with opportunities for custom behavior at each stage.",
      "phases": [
        {
          "phase": "Bean Definitions Declared",
          "description": "At this stage, bean definitions are declared by developers using XML, annotations, package scanning, or Groovy configuration. This creates the blueprint for how beans should be instantiated and configured.",
          "events": [
            "Annotations like @Component, @Service, @Controller, etc.",
            "XML or @Configuration class declarations"
          ]
        },
        {
          "phase": "Bean Definitions Loaded",
          "description": "The Spring container reads the configuration metadata and converts it into BeanDefinition objects that encapsulate details such as scope, dependencies, and initialization methods.",
          "events": [
            "Configuration is read by BeanDefinitionReader",
            "BeanDefinition objects are created"
          ]
        },
        {
          "phase": "Bean Definitions Processed",
          "description": "Before any beans are instantiated, BeanFactoryPostProcessors modify or enrich the BeanDefinition objects, allowing for custom adjustments like property overrides.",
          "events": [
            "Modifications to BeanDefinitions",
            "Custom BeanFactoryPostProcessor implementations"
          ]
        },
        {
          "phase": "Instantiation",
          "description": "The container instantiates the bean by invoking its constructor. In cases where FactoryBeans are used, custom creation logic is applied to generate the bean instance.",
          "events": [
            "Constructor is invoked",
            "Custom FactoryBean instances are used if applicable"
          ]
        },
        {
          "phase": "Dependency Injection",
          "description": "After instantiation, the Spring container injects the necessary dependencies into the bean via constructor or setter injection, ensuring the bean is fully prepared for use.",
          "events": [
            "Constructor injection",
            "Setter injection",
            "@Autowired or @Qualifier annotations used"
          ]
        },
        {
          "phase": "Post-Processing (Before Initialization)",
          "description": "Registered BeanPostProcessors have the opportunity to modify the bean instance before its initialization callbacks are executed, for instance by wrapping it with proxies or altering its configuration.",
          "events": [
            "BeanPostProcessor is called before @PostConstruct",
            "Adjustments to the bean proxy or dependencies"
          ]
        },
        {
          "phase": "Initialization",
          "description": "During initialization, the bean undergoes lifecycle callbacks such as @PostConstruct methods, the afterPropertiesSet method (if it implements InitializingBean), or custom initialization methods to finalize its configuration.",
          "events": [
            "BeanNameAware.setBeanName()",
            "BeanFactoryAware.setBeanFactory()",
            "ApplicationContextAware.setApplicationContext()",
            "@PostConstruct methods",
            "InitializingBean.afterPropertiesSet()",
            "Custom init-method"
          ]
        },
        {
          "phase": "Post-Processing (After Initialization)",
          "description": "After the bean is initialized, BeanPostProcessors can further modify the bean instance, for tasks such as AOP proxy wrapping or additional customizations.",
          "events": [
            "Second round of BeanPostProcessor is executed",
            "Circular dependencies or proxy wrapping handled"
          ]
        },
        {
          "phase": "Application Context",
          "description": "Once fully processed, the bean is stored in the ApplicationContext, making it available for retrieval and use throughout the application.",
          "events": [
            "Bean is accessible via ApplicationContext"
          ]
        },
        {
          "phase": "Destruction",
          "description": "When the application context is closed or a bean is explicitly disposed, the destruction phase is triggered, invoking callbacks such as @PreDestroy methods, DisposableBean.destroy(), or custom destroy methods to release resources.",
          "events": [
            "@PreDestroy methods",
            "DisposableBean.destroy()",
            "Custom destroy-method"
          ]
        }
      ]
    },
    {
      "id": "bean-scopes",
      "title": "Bean Scopes",
      "description": "An overview of the different scopes available for Spring beans, which determine the bean's lifecycle and visibility within the application context. Each scope is tailored for specific use cases.",
      "scopes": [
        {
          "name": "singleton",
          "description": "A singleton bean is created once per Spring container, ensuring a single shared instance throughout the application's lifecycle. This scope is ideal for stateless services.",
          "usage": "@Scope(\"singleton\")",
          "defaultScope": true,
          "bestFor": "Stateless beans"
        },
        {
          "name": "prototype",
          "description": "A prototype bean is instantiated each time it is requested from the container, making it suitable for stateful beans that require a unique instance for every use.",
          "usage": "@Scope(\"prototype\")",
          "bestFor": "Stateful beans"
        },
        {
          "name": "request",
          "description": "A request-scoped bean is created once per HTTP request, which makes it ideal for web-specific components that should only exist for the duration of a single request.",
          "usage": "@Scope(\"request\")",
          "bestFor": "Web-specific beans"
        },
        {
          "name": "session",
          "description": "A session-scoped bean is instantiated once per HTTP session, allowing it to maintain state across multiple requests from the same user.",
          "usage": "@Scope(\"session\")",
          "bestFor": "User-specific beans"
        },
        {
          "name": "application",
          "description": "An application-scoped bean is created once per ServletContext, providing a single instance that spans the entire lifecycle of the web application.",
          "usage": "@Scope(\"application\")",
          "bestFor": "Application-wide beans"
        }
      ]
    },
    {
      "id": "configuration",
      "title": "Spring Configuration",
      "description": "A detailed exploration of the various methods for configuring Spring applications, each offering unique advantages such as type safety, ease of refactoring, and a clear separation between configuration and business logic.",
      "methods": [
        {
          "type": "Java Configuration",
          "description": "Configuration using Java classes leverages annotations and code-based definitions to create and manage beans. This method provides type safety and excellent IDE support, making it easier to maintain and refactor.",
          "example": {
            "code": "@Configuration\npublic class AppConfig {\n    @Bean\n    public UserService userService() {\n        return new UserService();\n    }\n}",
            "advantages": [
              "Type safety",
              "Better refactoring support",
              "IDE support"
            ]
          }
        },
        {
          "type": "XML Configuration",
          "description": "Configuration using XML files separates configuration from code, allowing beans and their dependencies to be defined externally. This approach is useful for legacy systems and when dynamic reconfiguration without recompilation is required.",
          "example": {
            "code": "<beans>\n    <bean id=\"userService\" class=\"com.example.UserService\">\n        <property name=\"userRepository\" ref=\"userRepository\"/>\n    </bean>\n</beans>",
            "advantages": [
              "No recompilation needed for changes",
              "Separation from code",
              "Legacy support"
            ]
          }
        },
        {
          "type": "Annotation Configuration",
          "description": "Annotation-based configuration embeds metadata directly in the code using annotations like @Component and @Autowired. This reduces external configuration and makes the dependency injection process more intuitive.",
          "example": {
            "code": "@Component\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n}",
            "advantages": [
              "Less configuration",
              "Closer to code",
              "Easy to understand"
            ]
          }
        }
      ]
    },
    {
      "id": "aop",
      "title": "Aspect-Oriented Programming",
      "description": "Aspect-Oriented Programming (AOP) in Spring enables the modularization of cross-cutting concerns—such as logging, security, and transaction management—by separating these aspects from the core business logic.",
      "concepts": [
        {
          "term": "Aspect",
          "description": "An aspect is a modular unit that encapsulates a cross-cutting concern (e.g., logging or security) that affects multiple parts of the application.",
          "example": "Logging, Transaction Management"
        },
        {
          "term": "Join Point",
          "description": "A join point is a specific point in the execution of a program, such as a method call or exception handling, where an aspect can be applied.",
          "example": "Method execution, Exception handling"
        },
        {
          "term": "Pointcut",
          "description": "A pointcut is an expression that selects one or more join points where an aspect's advice should be executed.",
          "example": "@Pointcut(\"execution(* com.example.service.*.*(..))\")"
        },
        {
          "term": "Advice",
          "description": "Advice defines the action taken by an aspect at a join point. It can be executed before, after, or around the join point, depending on the type of advice.",
          "types": [
            {
              "name": "@Before",
              "description": "Executes before the join point, often used for logging, validation, or security checks."
            },
            {
              "name": "@After",
              "description": "Executes after the join point has completed, regardless of its outcome."
            },
            {
              "name": "@Around",
              "description": "Wraps the join point execution, allowing actions both before and after, and can control whether the join point proceeds."
            },
            {
              "name": "@AfterReturning",
              "description": "Executes after a successful join point execution, enabling post-processing of the returned value."
            },
            {
              "name": "@AfterThrowing",
              "description": "Executes if the join point throws an exception, facilitating centralized error handling or logging."
            }
          ]
        }
      ],
      "examples": [
        {
          "title": "Logging Aspect",
          "code": "@Aspect\n@Component\npublic class LoggingAspect {\n    @Before(\"execution(* com.example.service.*.*(..))\")\n    public void logBefore(JoinPoint joinPoint) {\n        // Logging logic\n    }\n}",
          "description": "This example demonstrates a logging aspect that executes before any method within the specified package, providing a centralized logging mechanism."
        }
      ]
    },
    {
      "id": "spring-components",
      "title": "Spring Core Components",
      "description": "An in-depth overview of the core components in the Spring Framework and how they interact to form a robust, flexible foundation for enterprise applications.",
      "components": [
        {
          "name": "BeanFactory",
          "description": "The simplest container in Spring, responsible for instantiating, configuring, and managing the lifecycle of beans. It emphasizes lazy initialization by creating beans only when required.",
          "characteristics": [
            "Lazy initialization",
            "Basic IoC container",
            "Bean lifecycle management"
          ],
          "relationships": [
            {
              "component": "BeanPostProcessor",
              "description": "Provides hooks for modifying beans during their lifecycle."
            },
            {
              "component": "BeanFactoryPostProcessor",
              "description": "Allows modification of bean definitions before bean instantiation."
            }
          ]
        },
        {
          "name": "ApplicationContext",
          "description": "An advanced container that extends BeanFactory by adding enterprise-specific features such as internationalization, event propagation, and resource management. It eagerly initializes singleton beans, ensuring that all necessary beans are available at startup.",
          "features": [
            "Event propagation",
            "Internationalization",
            "Eager initialization",
            "Resource management"
          ],
          "relationships": [
            {
              "component": "Environment",
              "description": "Manages application properties and configuration profiles."
            },
            {
              "component": "Resource",
              "description": "Provides a unified way to access various types of resources."
            },
            {
              "component": "PropertyEditor",
              "description": "Handles conversion of property values to the required data types."
            }
          ]
        },
        {
          "name": "BeanPostProcessor",
          "description": "An interface that allows for custom modification of new bean instances, both before and after initialization, such as wrapping them with proxies or altering their properties.",
          "methods": [
            {
              "name": "postProcessBeforeInitialization",
              "description": "Called before a bean's initialization callbacks are invoked."
            },
            {
              "name": "postProcessAfterInitialization",
              "description": "Called after a bean has been fully initialized, allowing for further modifications."
            }
          ]
        },
        {
          "name": "BeanFactoryPostProcessor",
          "description": "An interface that enables the modification of bean definitions after they have been loaded but before any beans are instantiated, allowing for custom alterations to bean properties and configurations.",
          "usage": "Programmatically modify bean properties and configurations",
          "example": {
            "code": "@Component\npublic class CustomBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n        // Modify bean definitions\n    }\n}"
          }
        },
        {
          "name": "BeanDefinition",
          "description": "Encapsulates the metadata required for bean creation, including class name, constructor arguments, property values, dependencies, and scope. This metadata guides the container in managing bean instantiation and lifecycle.",
          "properties": [
            "Class name",
            "Constructor arguments",
            "Properties",
            "Dependencies",
            "Scope",
            "Lazy initialization flag"
          ]
        },
        {
          "name": "FactoryBean",
          "description": "A special type of bean that encapsulates custom object creation logic. It abstracts complex creation processes, allowing for flexible and reusable bean definitions.",
          "methods": [
            {
              "name": "getObject",
              "description": "Returns the object created by this factory bean."
            },
            {
              "name": "getObjectType",
              "description": "Returns the type of object that this factory bean creates."
            },
            {
              "name": "isSingleton",
              "description": "Indicates whether the created object is a singleton."
            }
          ]
        },
        {
          "name": "Environment",
          "description": "Represents the application's environment, including active profiles and properties. It is essential for runtime configuration management and property resolution.",
          "features": [
            "Profile management",
            "Property resolution",
            "Configuration management"
          ]
        },
        {
          "name": "Resource",
          "description": "An abstraction for accessing resources such as files, classpath resources, or URLs, providing a consistent approach to resource management across different environments.",
          "types": [
            "ClassPathResource",
            "FileSystemResource",
            "UrlResource",
            "ServletContextResource"
          ]
        },
        {
          "name": "PropertyEditor",
          "description": "Used to convert string representations of property values into the required Java object types, playing a key role in data binding and type conversion.",
          "usage": "Property binding and type conversion"
        },
        {
          "name": "BeanWrapper",
          "description": "Provides a way to access and manipulate bean properties, including support for nested properties and automatic type conversion.",
          "features": [
            "Property access",
            "Property type conversion",
            "Property nesting"
          ]
        },
        {
          "name": "ConversionService",
          "description": "A flexible type conversion system that supports conversion between different data types, essential for property binding and formatting in Spring applications.",
          "features": [
            "Type conversion",
            "Property binding",
            "Format conversion"
          ]
        }
      ],
      "additionalFeatures": {
        "propertyPlaceholderConfigurer": {
          "description": "A mechanism that replaces placeholder values in bean definitions with actual property values from external sources, facilitating externalized configuration and dynamic property management.",
          "usage": "Externalized configuration",
          "example": "${property.name}"
        }
      },
      "lifecycleFlow": {
        "beanCreation": [
          "BeanDefinition loading",
          "BeanFactoryPostProcessor processing",
          "Bean instantiation",
          "Property population",
          "BeanPostProcessor pre-initialization",
          "Custom initialization",
          "BeanPostProcessor post-initialization"
        ],
        "contextStartup": [
          "Environment preparation",
          "Bean definition loading",
          "Bean factory post-processing",
          "Bean post-processor registration",
          "Singleton pre-instantiation",
          "Context refresh completion"
        ]
      }
    }
  ]
}
