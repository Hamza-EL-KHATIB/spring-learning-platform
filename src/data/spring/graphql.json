{
  "id": "graphql",
  "title": "GraphQL",
  "topics": [
    {
      "title": "Core Concepts Overview",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "GraphQL is a query language and runtime for APIs that enables clients to request exactly the data they need. Unlike REST, GraphQL uses a single endpoint where clients define the structure of the response."
        },
        {
          "title": "Key Features",
          "multi-content": [
            "Schema Definition: Define available types and operations",
            "Resolvers: Implement data fetching logic",
            "Queries: Request data from the server",
            "Mutations: Modify server data",
            "N+1 Problem: Performance optimization challenge",
            "Subscriptions: Real-time updates",
            "Error Handling: Managing API errors",
            "Security: Protecting GraphQL endpoints",
            "Testing: Validating GraphQL implementations"
          ]
        }
      ]
    },
    {
      "title": "GraphQL vs REST",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "GraphQL addresses several limitations of traditional REST APIs."
        },
        {
          "title": "Comparison",
          "multi-content": [
            "Endpoints: GraphQL uses a single endpoint while REST uses multiple endpoints",
            "Data Fetching: In GraphQL, client specifies exact data needs whereas in REST, server determines response structure",
            "Overfetching: Eliminated in GraphQL as client gets only requested fields, common in REST where endpoints return fixed data structures",
            "Underfetching: Eliminated in GraphQL as one request can fetch related data, common in REST which requires multiple requests for related data",
            "Versioning: GraphQL evolves schema without versioning while REST often requires explicit API versioning",
            "Documentation: GraphQL is self-documenting through introspection whereas REST requires external documentation",
            "Complexity Control: In GraphQL, client can create complex queries while in REST, server defines fixed endpoint complexity"
          ]
        },
        {
          "title": "Benefits",
          "multi-content": [
            "Flexible Data Requirements: Clients request precisely what they need",
            "Reduced Network Traffic: Minimizes data transfer by eliminating overfetching",
            "Strongly-Typed Schema: Provides clear contract between client and server",
            "Introspection: Self-documenting API through schema exploration",
            "Evolution Without Breaking Changes: Add fields without affecting existing clients"
          ]
        }
      ]
    },
    {
      "title": "Schema Definition",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "The GraphQL schema defines the capabilities of the API using the Schema Definition Language (SDL)."
        },
        {
          "title": "Basic Types",
          "simple-content": "GraphQL has scalar types (Int, Float, String, Boolean, ID) and object types that represent domain objects."
        },
        {
          "title": "Type Modifiers",
          "multi-content": [
            "`!` - Non-nullable field",
            "`[Type]` - List of Type",
            "`[Type!]` - List of non-nullable Type",
            "`[Type!]!` - Non-nullable list of non-nullable Type"
          ]
        },
        {
          "title": "Operations",
          "simple-content": "GraphQL operations include Query (data fetching), Mutation (data modification), and Subscription (real-time updates)."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Basic Types",
              "simple-content": "# Scalar types\nInt\nFloat\nString\nBoolean\nID\n\n# Object type\ntype User {\n  id: ID!\n  name: String!\n  email: String\n  posts: [Post!]\n}\n\n# Input type (used for arguments)\ninput UserInput {\n  name: String!\n  email: String!\n}"
            },
            {
              "title": "Operations",
              "simple-content": "# Schema with operations\ntype Query {\n  user(id: ID!): User\n  users: [User!]!\n}\n\ntype Mutation {\n  createUser(input: UserInput!): User!\n  updateUser(id: ID!, input: UserInput!): User!\n}\n\ntype Subscription {\n  userCreated: User!\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Spring GraphQL Implementation",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Spring provides first-class support for GraphQL through the Spring for GraphQL project."
        },
        {
          "title": "Core Annotations",
          "multi-content": [
            "`@QueryMapping`: Maps a method to a Query field",
            "`@MutationMapping`: Maps a method to a Mutation field",
            "`@SubscriptionMapping`: Maps a method to a Subscription field",
            "`@SchemaMapping`: Maps a method to a specific field in a type",
            "`@Argument`: Binds a method parameter to a GraphQL argument",
            "`@BatchMapping`: Optimizes loading of related objects in batches"
          ]
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Configuration",
              "simple-content": "@Configuration\npublic class GraphQLConfig {\n    @Bean\n    public GraphQlSource graphQlSource() {\n        // Load schema from classpath resources\n        return GraphQlSource.builder()\n            .schemaResources(\"classpath:graphql/schema.graphqls\")\n            .build();\n    }\n}"
            },
            {
              "title": "Dependencies",
              "simple-content": "<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-graphql</artifactId>\n</dependency>"
            },
            {
              "title": "Controllers & Resolvers",
              "simple-content": "@Controller\npublic class UserController {\n    private final UserService userService;\n    \n    @Autowired\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n    \n    @QueryMapping\n    public User user(@Argument Long id) {\n        return userService.findById(id);\n    }\n    \n    @MutationMapping\n    public User createUser(@Argument UserInput input) {\n        return userService.createUser(input);\n    }\n    \n    // Field resolver for nested objects\n    @SchemaMapping(typeName = \"User\", field = \"posts\")\n    public List<Post> getPosts(User user) {\n        return postService.findByUserId(user.getId());\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Resolvers",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Resolvers are functions that return data for a specific field in a GraphQL operation."
        },
        {
          "title": "Types of Resolvers",
          "multi-content": [
            "Query Resolvers: Entry points for data fetching",
            "Mutation Resolvers: Entry points for data modification",
            "Field Resolvers: Fetch related data for nested objects",
            "Subscription Resolvers: Handle real-time updates"
          ]
        },
        {
          "title": "Execution Order",
          "multi-content": [
            "Query/Mutation/Subscription resolver executes first",
            "Field resolvers execute for each field requested",
            "Each level of nesting creates a new set of field resolvers"
          ]
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Resolver Chain",
              "simple-content": "query {\n  user(id: \"1\") {  # Query resolver\n    name           # Field resolvers\n    email          # (these might be resolved from the same User object)\n    posts {        # Field resolver for nested relation\n      title        # Field resolvers\n      content      # for Post fields\n    }\n  }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "N+1 Problem",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "One of the most significant performance challenges in GraphQL is the N+1 query problem. When fetching a list of objects and their relationships, GraphQL will: 1. Execute 1 query to fetch the list of objects, 2. Execute N separate queries to fetch related data for each object."
        },
        {
          "title": "Solutions",
          "multi-content": [
            {
              "title": "DataLoader",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "The DataLoader pattern batches and caches data fetching operations."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implementation",
                      "simple-content": "@Component\npublic class PostDataLoader {\n    private final PostRepository postRepository;\n    \n    public PostDataLoader(PostRepository postRepository) {\n        this.postRepository = postRepository;\n    }\n    \n    public DataLoader<Long, List<Post>> postDataLoader() {\n        return DataLoader.newDataLoader(userIds -> {\n            Map<Long, List<Post>> postsByUserId = postRepository.findByUserIdIn(userIds)\n                .stream()\n                .collect(Collectors.groupingBy(Post::getUserId));\n            \n            return CompletableFuture.supplyAsync(() -> \n                userIds.stream()\n                    .map(id -> postsByUserId.getOrDefault(id, Collections.emptyList()))\n                    .collect(Collectors.toList())\n            );\n        });\n    }\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@BatchMapping",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "Spring GraphQL supports batch loading with the `@BatchMapping` annotation."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implementation",
                      "simple-content": "@Controller\npublic class UserController {\n    @BatchMapping\n    public Map<User, List<Post>> posts(List<User> users) {\n        List<Long> userIds = users.stream()\n            .map(User::getId)\n            .collect(Collectors.toList());\n            \n        List<Post> allPosts = postRepository.findByUserIdIn(userIds);\n        \n        return allPosts.stream()\n            .collect(Collectors.groupingBy(\n                post -> users.stream()\n                    .filter(user -> user.getId().equals(post.getUserId()))\n                    .findFirst()\n                    .orElseThrow()\n            ));\n    }\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "Join Fetches",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "When using JPA, join fetches can load related entities in a single query."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implementation",
                      "simple-content": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    @Query(\"SELECT u FROM User u LEFT JOIN FETCH u.posts WHERE u.id IN :ids\")\n    List<User> findByIdInWithPosts(List<Long> ids);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "Caching",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "Use application-level caching to reduce database queries."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implementation",
                      "simple-content": "@Cacheable(\"users\")\npublic User findById(Long id) {\n    return userRepository.findById(id).orElseThrow();\n}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "N+1 Problem Example",
              "simple-content": "# This query could cause an N+1 problem\nquery {\n  users {       # 1 query to fetch all users\n    name\n    posts {     # N queries (one per user) to fetch posts\n      title\n    }\n  }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Error Handling",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "GraphQL handles errors differently than REST APIs, typically returning a 200 OK status even when errors occur."
        },
        {
          "title": "Partial Responses",
          "simple-content": "GraphQL can return partial responses, providing data for fields that were successful while returning errors for the failed fields."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Standard Error Format",
              "simple-content": "{\n  \"data\": {\n    \"user\": null\n  },\n  \"errors\": [\n    {\n      \"message\": \"User with ID 123 not found\",\n      \"locations\": [{\"line\": 2, \"column\": 3}],\n      \"path\": [\"user\"],\n      \"extensions\": {\n        \"classification\": \"NOT_FOUND\"\n      }\n    }\n  ]\n}"
            },
            {
              "title": "Spring GraphQL Error Handling",
              "simple-content": "@ControllerAdvice\npublic class GraphQLExceptionHandler {\n    @ExceptionHandler(UserNotFoundException.class)\n    public GraphQLError handleUserNotFound(UserNotFoundException ex) {\n        return GraphQLError.newError()\n            .message(ex.getMessage())\n            .errorType(ErrorType.NOT_FOUND)\n            .build();\n    }\n}"
            },
            {
              "title": "Partial Response Example",
              "simple-content": "{\n  \"data\": {\n    \"user\": {\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"posts\": null\n    }\n  },\n  \"errors\": [\n    {\n      \"message\": \"Failed to load posts\",\n      \"path\": [\"user\", \"posts\"]\n    }\n  ]\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Subscriptions",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Subscriptions provide real-time updates over persistent connections using WebSockets."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Setting Up Subscriptions",
              "simple-content": "@Configuration\npublic class WebSocketConfig {\n    @Bean\n    public WebSocketHandler graphQlWebSocketHandler(GraphQlSource graphQlSource) {\n        return GraphQlWebSocketHandler.builder(graphQlSource)\n            .build();\n    }\n    \n    @Bean\n    public HandlerMapping graphQlWebSocketHandlerMapping(WebSocketHandler graphQlWebSocketHandler) {\n        return new SimpleUrlHandlerMapping(\n            Map.of(\"/graphql-ws\", graphQlWebSocketHandler), 10);\n    }\n}"
            },
            {
              "title": "Implementing Subscription Resolvers",
              "simple-content": "@Controller\npublic class UserSubscriptionController {\n    private final Sinks.Many<User> userSink = Sinks.many().multicast().onBackpressureBuffer();\n    \n    @SubscriptionMapping\n    public Publisher<User> userCreated() {\n        return userSink.asFlux();\n    }\n    \n    public void publishUserCreated(User user) {\n        userSink.tryEmitNext(user);\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Security",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Securing GraphQL endpoints requires special consideration due to their flexibility."
        },
        {
          "title": "Authentication",
          "simple-content": "Securing GraphQL endpoints using Spring Security for authentication."
        },
        {
          "title": "Authorization",
          "simple-content": "Method-level security using Spring Security annotations."
        },
        {
          "title": "Query Complexity Analysis",
          "simple-content": "Protect against resource exhaustion with query complexity analysis."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Authentication Configuration",
              "simple-content": "@Configuration\npublic class GraphQLSecurityConfig {\n    @Bean\n    public SecurityWebFilterChain securityFilterChain(ServerHttpSecurity http) {\n        return http\n            .authorizeExchange()\n            .pathMatchers(\"/graphql\").authenticated()\n            .and()\n            .oauth2ResourceServer().jwt()\n            .and().build();\n    }\n}"
            },
            {
              "title": "Method-Level Authorization",
              "simple-content": "@Controller\npublic class SecureUserController {\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    @QueryMapping\n    public List<User> allUsers() {\n        return userService.findAll();\n    }\n    \n    @PreAuthorize(\"authentication.name == #user.email or hasRole('ADMIN')\")\n    @MutationMapping\n    public User updateUser(@Argument User user) {\n        return userService.update(user);\n    }\n}"
            },
            {
              "title": "Query Complexity Configuration",
              "simple-content": "@Bean\npublic GraphQlSource graphQlSource() {\n    return GraphQlSource.builder()\n        .schemaResources(\"classpath:graphql/schema.graphqls\")\n        .instrumentation(new MaxQueryComplexityInstrumentation(100))\n        .build();\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Testing",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Comprehensive testing of GraphQL APIs is essential for reliability."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Using GraphQlTester",
              "simple-content": "@SpringBootTest\n@AutoConfigureGraphQlTester\nclass UserControllerTests {\n    @Autowired\n    private GraphQlTester graphQlTester;\n    \n    @Test\n    void shouldGetUserById() {\n        // Given\n        String query = \"\"\"\n            query {\n              user(id: \"1\") {\n                name\n                email\n              }\n            }\n            \"\"\";\n            \n        // When & Then\n        graphQlTester.document(query)\n            .execute()\n            .path(\"user.name\")\n            .entity(String.class)\n            .isEqualTo(\"John Doe\")\n            .path(\"user.email\")\n            .entity(String.class)\n            .isEqualTo(\"john@example.com\");\n    }\n}"
            },
            {
              "title": "Testing Mutations",
              "simple-content": "@Test\nvoid shouldCreateUser() {\n    // Given\n    String mutation = \"\"\"\n        mutation {\n          createUser(input: {name: \"Jane Doe\", email: \"jane@example.com\"}) {\n            id\n            name\n            email\n          }\n        }\n        \"\"\";\n        \n    // When & Then\n    graphQlTester.document(mutation)\n        .execute()\n        .path(\"createUser.name\")\n        .entity(String.class)\n        .isEqualTo(\"Jane Doe\");\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Best Practices",
      "multi-content": [
        {
          "title": "Schema Design",
          "multi-content": [
            "Design Schema First: Start with the schema before implementation",
            "Use Domain Terminology: Make field names clear and consistent",
            "Group Related Fields: Organize fields logically within types",
            "Consider Pagination: Design for scalability from the start",
            "Proper Nullability: Mark fields as non-null (`!`) when appropriate"
          ]
        },
        {
          "title": "Performance Optimization",
          "multi-content": [
            "Implement DataLoader: Always use DataLoader or batch loading",
            "Select Only Needed Fields: At the database level, select only required columns",
            "Use Caching: Implement appropriate caching strategies",
            "Monitor Query Complexity: Implement complexity analysis",
            "Use Connection Pattern: For pagination of large result sets"
          ]
        },
        {
          "title": "Error Handling",
          "multi-content": [
            "Consistent Error Format: Standardize error responses",
            "Detailed Messages: Provide actionable error messages",
            "Error Classification: Categorize errors (e.g., NOT_FOUND, VALIDATION)",
            "Avoid Exposing Internals: Don't leak implementation details"
          ]
        }
      ]
    },
    {
      "title": "Interview FAQs",
      "multi-content": [
        {
          "title": "What is GraphQL and how does it differ from REST?",
          "simple-content": "GraphQL is a query language for APIs that enables clients to request exactly the data they need. Unlike REST, which has multiple endpoints returning fixed data structures, GraphQL uses a single endpoint where clients define the structure of the response. This eliminates overfetching and underfetching of data, reduces network overhead, and gives clients more flexibility."
        },
        {
          "title": "How do you implement GraphQL in a Spring Boot application?",
          "multi-content": [
            "Add Spring GraphQL dependencies",
            "Define a GraphQL schema using SDL in `.graphqls` files",
            "Create controller classes with `@Controller` annotation",
            "Implement query resolvers with `@QueryMapping` annotation",
            "Implement mutation resolvers with `@MutationMapping` annotation",
            "Use `@SchemaMapping` for field resolvers",
            "Configure GraphQL in `application.properties` or Java configuration"
          ]
        },
        {
          "title": "How do you handle the N+1 problem in GraphQL?",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "The N+1 problem occurs when fetching a list of objects and their relationships, causing one query for the list and N queries for relationships."
            },
            {
              "title": "Solutions",
              "multi-content": [
                "DataLoader pattern: Batch and cache related data fetching operations",
                "BatchMapping: Spring GraphQL's annotation for batch loading",
                "Join fetches: Using JPA to load related entities in a single query",
                "Caching: Application-level caching to reduce database queries"
              ]
            }
          ]
        },
        {
          "title": "What are resolvers in GraphQL?",
          "simple-content": "Resolvers are functions that return data for specific fields in a GraphQL operation. They are responsible for fetching the data from various sources (databases, APIs, etc.) and returning it in the format defined by the schema. Resolvers are organized in a chain, with query/mutation resolvers at the top and field resolvers handling nested objects."
        },
        {
          "title": "How do you handle security in GraphQL?",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "GraphQL security requires multiple layers."
            },
            {
              "title": "Security Measures",
              "multi-content": [
                "Authentication: Secure the `/graphql` endpoint using Spring Security",
                "Authorization: Use `@PreAuthorize` for method-level security",
                "Query complexity analysis: Prevent resource exhaustion",
                "Rate limiting: Limit requests per client",
                "Input validation: Validate all user inputs",
                "Field-level access control: Control access to specific fields"
              ]
            }
          ]
        },
        {
          "title": "What are GraphQL subscriptions and how do you implement them?",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "Subscriptions provide real-time updates over persistent connections, typically using WebSockets."
            },
            {
              "title": "Implementation Steps",
              "multi-content": [
                "Configure WebSocket support",
                "Create subscription resolvers with `@SubscriptionMapping`",
                "Use reactive types (Publisher/Flux) to emit events",
                "Publish events when data changes",
                "Clients subscribe to receive updates"
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Advanced Topics",
      "multi-content": [
        {
          "title": "Schema Federation",
          "simple-content": "Technique for combining multiple GraphQL schemas into a unified graph."
        },
        {
          "title": "Custom Scalars",
          "simple-content": "Defining custom scalar types for specialized data formats like Date/Time."
        },
        {
          "title": "Schema Directives",
          "simple-content": "Special annotations in the schema that modify the execution behavior."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Schema Federation Configuration",
              "simple-content": "@Configuration\npublic class GraphQlFederationConfig {\n    @Bean\n    public FederatedSchemaRegistrar federatedSchemaRegistrar() {\n        return new FederatedSchemaRegistrar();\n    }\n}"
            },
            {
              "title": "Custom Scalar Implementation",
              "simple-content": "@Component\npublic class DateTimeScalarConfiguration {\n    @Bean\n    public GraphQLScalarType dateTimeScalar() {\n        return GraphQLScalarType.newScalar()\n            .name(\"DateTime\")\n            .description(\"ISO-8601 DateTime Scalar\")\n            .coercing(new DateTimeCoercing())\n            .build();\n    }\n}"
            },
            {
              "title": "Schema Directive Example",
              "simple-content": "directive @auth(role: String!) on FIELD_DEFINITION\n\ntype Query {\n  sensitiveData: String @auth(role: \"ADMIN\")\n}"
            }
          ]
        }
      ]
    }
  ]
}
