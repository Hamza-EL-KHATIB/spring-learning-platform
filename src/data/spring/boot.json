{
  "title": "Spring Boot",
  "topics": [
    {
      "id": "auto-configuration",
      "title": "Auto-Configuration",
      "description": "Spring Boot's automatic configuration mechanism",
      "concepts": [
        {
          "name": "Conditional Configuration",
          "annotations": [
            {
              "name": "@ConditionalOnClass",
              "description": "Configuration applies if class is present",
              "example": "@ConditionalOnClass(DataSource.class)"
            },
            {
              "name": "@ConditionalOnMissingBean",
              "description": "Configuration applies if bean is not present",
              "example": "@ConditionalOnMissingBean(DataSource.class)"
            },
            {
              "name": "@ConditionalOnProperty",
              "description": "Configuration based on property values",
              "example": "@ConditionalOnProperty(prefix=\"app\", name=\"feature\", havingValue=\"true\")"
            },
            {
              "name": "@ConditionalOnWebApplication",
              "description": "Configuration for web applications",
              "example": "@ConditionalOnWebApplication(type = Type.SERVLET)"
            },
            {
              "name": "@EnableAutoConfiguration",
              "description": "Enables Spring Bootâ€™s auto-configuration feature",
              "example": "@EnableAutoConfiguration"
            },
            {
              "name": "@Conditional",
              "description": "Conditionally includes or excludes configuration based on conditions",
              "example": "@Conditional(MyCondition.class)\n@Bean\npublic MyBean myBean() { return new MyBean(); }"
            }
          ]
        },
        {
          "name": "Core Configuration Annotations",
          "annotations": [
            {
              "name": "@SpringBootApplication",
              "description": "Main entry point for Spring Boot applications; combines @Configuration, @EnableAutoConfiguration, and @ComponentScan",
              "example": "@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}"
            },
            {
              "name": "@SpringBootConfiguration",
              "description": "Indicates a class provides Spring Boot application configurations",
              "example": "@SpringBootConfiguration\npublic class AppConfig {}"
            },
            {
              "name": "@ComponentScan",
              "description": "Scans for components, configurations, and services in specified packages",
              "example": "@ComponentScan(basePackages = \"com.example.app\")"
            },
            {
              "name": "@Bean",
              "description": "Declares a method produces a bean to be managed by Spring",
              "example": "@Bean\npublic DataSource dataSource() {\n    return new DataSource();\n}"
            }
          ]
        },
        {
          "name": "Auto-Configuration Files",
          "description": "Files that enable auto-configuration",
          "locations": [
            "META-INF/spring.factories",
            "META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports"
          ],
          "example": {
            "path": "META-INF/spring.factories",
            "content": "org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.example.MyAutoConfiguration"
          }
        }
      ]
    },
    {
      "id": "properties",
      "title": "Externalized Configuration",
      "description": "Managing application configuration",
      "types": [
        {
          "name": "application.properties/yaml",
          "locations": [
            "classpath:/",
            "classpath:/config/",
            "file:./",
            "file:./config/"
          ],
          "example": {
            "properties": "spring.datasource.url=jdbc:mysql://localhost/db\nspring.jpa.hibernate.ddl-auto=update",
            "yaml": "spring:\n  datasource:\n    url: jdbc:mysql://localhost/db\n  jpa:\n    hibernate:\n      ddl-auto: update"
          }
        },
        {
          "name": "@ConfigurationProperties",
          "description": "Type-safe configuration properties",
          "example": {
            "code": "@ConfigurationProperties(prefix = \"app\")\npublic class AppProperties {\n    private String name;\n    private int timeout;\n    // getters and setters\n}"
          }
        },
        {
          "name": "Profiles",
          "description": "Environment-specific configuration",
          "usage": [
            {
              "method": "application-{profile}.properties",
              "example": "application-dev.properties\napplication-prod.properties"
            },
            {
              "method": "@Profile annotation",
              "example": "@Profile(\"dev\")\n@Configuration\npublic class DevConfig {}"
            }
          ],
          "annotations": [
            {
              "name": "@Profile",
              "description": "Specifies that a component is eligible for registration when a specific profile is active",
              "example": "@Profile(\"test\")\n@Bean\npublic DataSource testDataSource() { return new DataSource(); }"
            }
          ]
        },
        {
          "name": "Property Annotations",
          "annotations": [
            {
              "name": "@Value",
              "description": "Injects values from property files or environment variables",
              "example": "@Value(\"${app.name}\")\nprivate String appName;"
            },
            {
              "name": "@PropertySource",
              "description": "Specifies a properties file to load",
              "example": "@PropertySource(\"classpath:extra.properties\")\npublic class ExtraConfig {}"
            }
          ]
        }
      ]
    },
    {
      "id": "starters",
      "title": "Spring Boot Starters",
      "description": "Dependency descriptors for common application types",
      "commonStarters": [
        {
          "name": "spring-boot-starter-web",
          "description": "Web and RESTful applications",
          "includes": [
            "Spring MVC",
            "Tomcat",
            "Jackson"
          ],
          "annotations": [
            {
              "name": "@Controller",
              "description": "Defines a Spring MVC controller",
              "example": "@Controller\npublic class HomeController {}"
            },
            {
              "name": "@RestController",
              "description": "Defines a RESTful controller; combines @Controller and @ResponseBody",
              "example": "@RestController\npublic class ApiController {}"
            },
            {
              "name": "@ResponseBody",
              "description": "Indicates a method return value should be bound to the web response body",
              "example": "@ResponseBody\n@GetMapping(\"/data\")\npublic String getData() { return \"data\"; }"
            },
            {
              "name": "@PathVariable",
              "description": "Binds a method parameter to a URI template variable",
              "example": "@GetMapping(\"/users/{id}\")\npublic User getUser(@PathVariable Long id) { return userService.findById(id); }"
            },
            {
              "name": "@RequestParam",
              "description": "Binds a method parameter to a web request parameter",
              "example": "@GetMapping(\"/search\")\npublic List<Item> search(@RequestParam String query) { return searchService.search(query); }"
            }
          ]
        },
        {
          "name": "spring-boot-starter-data-jpa",
          "description": "JPA with Hibernate",
          "includes": [
            "Hibernate",
            "Spring Data JPA",
            "Spring Transaction"
          ],
          "annotations": [
            {
              "name": "@Repository",
              "description": "Indicates a DAO component that interacts with the database",
              "example": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {}"
            },
            {
              "name": "@Autowired",
              "description": "Allows Spring to resolve and inject collaborating beans",
              "example": "public class UserService {\n    @Autowired\n    private UserRepository userRepository;\n}"
            },
            {
              "name": "@Qualifier",
              "description": "Specifies which bean should be autowired when multiple candidates are available",
              "example": "@Autowired\n@Qualifier(\"mainDataSource\")\nprivate DataSource dataSource;"
            },
            {
              "name": "@Primary",
              "description": "Indicates that a bean should be given preference when multiple beans are candidates",
              "example": "@Primary\n@Bean\npublic DataSource primaryDataSource() { return new DataSource(); }"
            }
          ]
        },
        {
          "name": "spring-boot-starter-security",
          "description": "Security features",
          "includes": [
            "Spring Security",
            "Security Config"
          ]
        },
        {
          "name": "spring-boot-starter-test",
          "description": "Testing framework",
          "includes": [
            "JUnit",
            "Mockito",
            "Spring Test"
          ],
          "annotations": [
            {
              "name": "@SpringBootTest",
              "description": "Used for integration testing of Spring Boot applications",
              "example": "@SpringBootTest\npublic class ApplicationTests {}"
            },
            {
              "name": "@DataJpaTest",
              "description": "Used for testing JPA repositories",
              "example": "@DataJpaTest\npublic class UserRepositoryTests {}"
            },
            {
              "name": "@WebMvcTest",
              "description": "Used for testing Spring MVC controllers",
              "example": "@WebMvcTest\npublic class ControllerTests {}"
            }
          ]
        }
      ]
    },
    {
      "id": "actuator",
      "title": "Spring Boot Actuator",
      "description": "Production-ready features for monitoring and managing applications",
      "endpoints": [
        {
          "path": "/health",
          "description": "Application health information",
          "usage": "Monitor application health"
        },
        {
          "path": "/metrics",
          "description": "Application metrics",
          "usage": "Monitor application metrics"
        },
        {
          "path": "/info",
          "description": "Application information",
          "usage": "Custom application info"
        },
        {
          "path": "/env",
          "description": "Environment properties",
          "usage": "View configuration properties"
        }
      ],
      "configuration": {
        "exposure": {
          "example": "management.endpoints.web.exposure.include=*",
          "security": "Careful consideration needed for production"
        }
      }
    },
    {
      "id": "embedded-servers",
      "title": "Embedded Servers",
      "description": "Built-in server support",
      "servers": [
        {
          "name": "Tomcat",
          "default": true,
          "configuration": {
            "properties": [
              "server.port",
              "server.servlet.context-path"
            ]
          }
        },
        {
          "name": "Jetty",
          "configuration": {
            "dependency": "spring-boot-starter-jetty",
            "exclusions": ["spring-boot-starter-tomcat"]
          }
        },
        {
          "name": "Undertow",
          "configuration": {
            "dependency": "spring-boot-starter-undertow",
            "exclusions": ["spring-boot-starter-tomcat"]
          }
        }
      ]
    },
    {
      "id": "scheduling",
      "title": "Task Scheduling",
      "description": "Scheduling tasks for periodic execution",
      "annotations": [
        {
          "name": "@Scheduled",
          "description": "Marks a method to be scheduled",
          "example": "@Scheduled(fixedRate = 5000)\npublic void scheduledTask() { /* ... */ }"
        }
      ]
    },
    {
      "id": "components",
      "title": "Spring Components",
      "description": "Core stereotypes and component scanning",
      "annotations": [
        {
          "name": "@Component",
          "description": "Generic stereotype for any Spring-managed component",
          "example": "@Component\npublic class MyComponent {}"
        },
        {
          "name": "@Service",
          "description": "Specialization of @Component for service layer",
          "example": "@Service\npublic class MyService {}"
        },
        {
          "name": "@Controller",
          "description": "Specialization of @Component for presentation layer (MVC)",
          "example": "@Controller\npublic class MyController {}"
        },
        {
          "name": "@Repository",
          "description": "Specialization of @Component for data access layer",
          "example": "@Repository\npublic class MyRepository {}"
        }
      ]
    }
  ]
}
