{
  "title": "Spring REST",
  "topics": [
    {
      "id": "rest-basics",
      "title": "REST Fundamentals",
      "description": "Core concepts of RESTful web services in Spring",
      "concepts": [
        {
          "name": "REST Principles",
          "principles": [
            {
              "name": "Stateless",
              "description": "No client context stored on server between requests"
            },
            {
              "name": "Uniform Interface",
              "description": "Standardized way to transfer data using HTTP methods"
            },
            {
              "name": "Client-Server",
              "description": "Separation of concerns between client and server"
            },
            {
              "name": "Cacheable",
              "description": "Responses must define themselves as cacheable or not"
            },
            {
              "name": "Layered System",
              "description": "Client can't tell if it's connected directly to the server"
            }
          ]
        },
        {
          "name": "HTTP Methods",
          "methods": [
            {
              "method": "GET",
              "usage": "Retrieve resource",
              "idempotent": true,
              "annotation": "@GetMapping"
            },
            {
              "method": "POST",
              "usage": "Create resource",
              "idempotent": false,
              "annotation": "@PostMapping"
            },
            {
              "method": "PUT",
              "usage": "Update/Replace resource",
              "idempotent": true,
              "annotation": "@PutMapping"
            },
            {
              "method": "DELETE",
              "usage": "Remove resource",
              "idempotent": true,
              "annotation": "@DeleteMapping"
            },
            {
              "method": "PATCH",
              "usage": "Partial update",
              "idempotent": false,
              "annotation": "@PatchMapping"
            }
          ]
        }
      ]
    },
    {
      "id": "rest-controllers",
      "title": "REST Controllers",
      "description": "Implementation of REST endpoints in Spring",
      "components": [
        {
          "name": "@RestController",
          "description": "Combines @Controller and @ResponseBody",
          "example": {
            "code": "@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    @GetMapping(\"/{id}\")\n    public User getUser(@PathVariable Long id) {\n        return userService.findById(id);\n    }\n}"
          }
        },
        {
          "name": "Request Mappings",
          "types": [
            {
              "annotation": "@RequestMapping",
              "description": "General purpose request mapping",
              "attributes": ["method", "path", "params", "headers", "consumes", "produces"]
            },
            {
              "annotation": "@GetMapping",
              "description": "Shortcut for @RequestMapping(method = GET)",
              "example": "@GetMapping(\"/users\")"
            },
            {
              "annotation": "@PostMapping",
              "description": "Shortcut for @RequestMapping(method = POST)",
              "example": "@PostMapping(\"/users\")"
            }
          ]
        },
        {
          "name": "Request Parameters",
          "annotations": [
            {
              "name": "@PathVariable",
              "description": "URL template variable",
              "example": "@GetMapping(\"/{id}\") \npublic User get(@PathVariable Long id)"
            },
            {
              "name": "@RequestParam",
              "description": "Query parameter",
              "example": "@GetMapping \npublic List<User> search(@RequestParam String name)"
            },
            {
              "name": "@RequestBody",
              "description": "HTTP request body",
              "example": "@PostMapping \npublic User create(@RequestBody User user)"
            }
          ]
        }
      ]
    },
    {
      "id": "response-handling",
      "title": "Response Handling",
      "description": "Managing REST API responses",
      "features": [
        {
          "name": "Response Entity",
          "description": "Represents HTTP response including status, headers, and body",
          "example": {
            "code": "@GetMapping(\"/{id}\")\npublic ResponseEntity<User> getUser(@PathVariable Long id) {\n    User user = userService.findById(id);\n    return ResponseEntity.ok(user);\n}"
          }
        },
        {
          "name": "Status Codes",
          "commonCodes": [
            {
              "code": "200 OK",
              "usage": "Successful GET, PUT, PATCH"
            },
            {
              "code": "201 Created",
              "usage": "Successful POST"
            },
            {
              "code": "204 No Content",
              "usage": "Successful DELETE"
            },
            {
              "code": "400 Bad Request",
              "usage": "Invalid request"
            },
            {
              "code": "404 Not Found",
              "usage": "Resource not found"
            },
            {
              "code": "500 Internal Server Error",
              "usage": "Server error"
            }
          ]
        }
      ]
    },
    {
      "id": "error-handling",
      "title": "Error Handling",
      "description": "Managing exceptions and errors in REST APIs",
      "components": [
        {
          "name": "@ControllerAdvice",
          "description": "Global exception handling",
          "example": {
            "code": "@ControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleNotFound(ResourceNotFoundException ex) {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND)\n                           .body(new ErrorResponse(ex.getMessage()));\n    }\n}"
          }
        },
        {
          "name": "@ExceptionHandler",
          "description": "Method-level exception handling",
          "example": {
            "code": "@ExceptionHandler(ValidationException.class)\npublic ResponseEntity<ErrorResponse> handleValidation(ValidationException ex) {\n    return ResponseEntity.badRequest().body(new ErrorResponse(ex.getMessage()));\n}"
          }
        }
      ]
    },
    {
      "id": "content-negotiation",
      "title": "Content Negotiation",
      "description": "Supporting multiple content types",
      "features": [
        {
          "name": "Content Types",
          "types": [
            {
              "type": "application/json",
              "description": "JSON format",
              "example": "@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)"
            },
            {
              "type": "application/xml",
              "description": "XML format",
              "example": "@GetMapping(produces = MediaType.APPLICATION_XML_VALUE)"
            }
          ]
        },
        {
          "name": "Request Headers",
          "headers": [
            {
              "name": "Accept",
              "description": "Specify desired response format"
            },
            {
              "name": "Content-Type",
              "description": "Specify request body format"
            }
          ]
        }
      ]
    },
    {
      "id": "security",
      "title": "REST Security",
      "description": "Securing REST endpoints",
      "features": [
        {
          "name": "Authentication",
          "methods": [
            "Basic Auth",
            "JWT",
            "OAuth2"
          ]
        },
        {
          "name": "Authorization",
          "annotations": [
            {
              "name": "@PreAuthorize",
              "example": "@PreAuthorize(\"hasRole('ADMIN')\")"
            },
            {
              "name": "@Secured",
              "example": "@Secured(\"ROLE_ADMIN\")"
            }
          ]
        }
      ]
    },
    {
      "id": "testing",
      "title": "REST API Testing",
      "description": "Testing REST endpoints",
      "types": [
        {
          "name": "@WebMvcTest",
          "description": "Test Spring MVC controllers",
          "example": {
            "code": "@WebMvcTest(UserController.class)\nclass UserControllerTest {\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    void testGetUser() {\n        mockMvc.perform(get(\"/api/users/1\"))\n               .andExpect(status().isOk());\n    }\n}"
          }
        },
        {
          "name": "RestTemplate",
          "description": "Test REST clients",
          "example": {
            "code": "@Test\nvoid testRestClient() {\n    RestTemplate restTemplate = new RestTemplate();\n    User user = restTemplate.getForObject(\"/api/users/1\", User.class);\n}"
          }
        }
      ]
    },
    {
      "id": "best-practices",
      "title": "REST Best Practices",
      "practices": [
        {
          "category": "URL Design",
          "recommendations": [
            "Use nouns for resources",
            "Keep URLs simple and intuitive",
            "Use plural nouns for collections",
            "Use sub-resources for relationships"
          ]
        },
        {
          "category": "Versioning",
          "strategies": [
            {
              "name": "URL Versioning",
              "example": "/api/v1/users"
            },
            {
              "name": "Header Versioning",
              "example": "X-API-Version: 1"
            },
            {
              "name": "Accept Header Versioning",
              "example": "Accept: application/vnd.company.app-v1+json"
            }
          ]
        },
        {
          "category": "Documentation",
          "tools": [
            {
              "name": "Swagger/OpenAPI",
              "usage": "API documentation and testing"
            },
            {
              "name": "Spring REST Docs",
              "usage": "Test-driven documentation"
            }
          ]
        }
      ]
    }
  ]
}