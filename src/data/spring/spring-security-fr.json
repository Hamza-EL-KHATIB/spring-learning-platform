{
  "id": "spring-security-fr",
  "title": "Spring Security",
  "topics": [
    {
      "title": "Concepts Fondamentaux",
      "multi-content": [
        {
          "title": "Authentification vs. Autorisation",
          "multi-content": [
            "Authentification : Le processus de vérification de l'identité d'un utilisateur (vérification d'identité)",
            "Autorisation : Le processus qui détermine ce qu'un utilisateur est autorisé à faire (vérification des permissions)"
          ]
        },
        {
          "title": "Composants Clés",
          "multi-content": [
            {
              "title": "UserDetailsService",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Interface principale qui charge les données spécifiques à l'utilisateur",
                    "Utilisée par le framework d'authentification de Spring Security",
                    "Implémente la méthode : `UserDetails loadUserByUsername(String username)`",
                    "Les implémentations personnalisées se connectent généralement aux référentiels d'utilisateurs (BD, LDAP, etc.)"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implémentation de UserDetailsService Personnalisée",
                      "simple-content": "@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n    @Autowired\n    private UserRepository userRepository;\n    \n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\n            \n        return new org.springframework.security.core.userdetails.User(\n            user.getUsername(),\n            user.getPassword(),\n            user.getAuthorities()\n        );\n    }\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "PasswordEncoder",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Interface pour encoder les mots de passe et vérifier les mots de passe encodés",
                    "Les implémentations courantes incluent :",
                    "BCryptPasswordEncoder",
                    "Pbkdf2PasswordEncoder",
                    "SCryptPasswordEncoder"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Bean PasswordEncoder",
                      "simple-content": "@Bean\npublic PasswordEncoder passwordEncoder() {\n    return new BCryptPasswordEncoder(12); // Facteur de force 12\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "SecurityContext",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Contient les détails d'authentification actuels",
                    "Accessible via `SecurityContextHolder.getContext()`",
                    "Stocke le jeton d'authentification de l'utilisateur après une connexion réussie"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Accéder au Contexte de Sécurité",
                      "simple-content": "Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\nString currentUsername = authentication.getName();"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "Configuration de Sécurité",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "Exemple de configuration moderne de Spring Security :"
            },
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Classe de Configuration de Sécurité",
                  "simple-content": "@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -> authz\n                .requestMatchers(\"/public/**\").permitAll()\n                .requestMatchers(\"/api/admin/**\").hasRole(\"ADMIN\")\n                .anyRequest().authenticated()\n            )\n            .formLogin(form -> form\n                .loginPage(\"/login\")\n                .permitAll()\n            )\n            .csrf(csrf -> csrf.disable()); // Uniquement pour les APIs, non recommandé pour les applications web\n            \n        return http.build();\n    }\n    \n    @Bean\n    public UserDetailsService userDetailsService() {\n        UserDetails user = User.withDefaultPasswordEncoder()\n            .username(\"user\")\n            .password(\"password\")\n            .roles(\"USER\")\n            .build();\n            \n        UserDetails admin = User.withDefaultPasswordEncoder()\n            .username(\"admin\")\n            .password(\"password\")\n            .roles(\"ADMIN\")\n            .build();\n            \n        return new InMemoryUserDetailsManager(user, admin);\n    }\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Sécurité au Niveau des Méthodes",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Spring Security fournit des annotations pour la sécurité au niveau des méthodes :"
        },
        {
          "title": "Annotations",
          "multi-content": [
            {
              "title": "@PreAuthorize",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "S'exécute avant l'appel de la méthode",
                    "Utilise Spring Expression Language (SpEL)",
                    "Accès aux arguments de la méthode"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Exemple PreAuthorize",
                      "simple-content": "@PreAuthorize(\"hasRole('ADMIN') or #username == authentication.principal.username\")\npublic User getUserDetails(String username) {\n    return userRepository.findByUsername(username);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@PostAuthorize",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "S'exécute après l'appel de la méthode",
                    "Peut accéder à la valeur de retour de la méthode",
                    "Utilise `returnObject` pour faire référence à la valeur de retour"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Exemple PostAuthorize",
                      "simple-content": "@PostAuthorize(\"returnObject.username == authentication.principal.username\")\npublic User getUser(Long id) {\n    return userRepository.findById(id);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@Secured",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Annotation plus simple qui vérifie des rôles spécifiques",
                    "Pas de support de SpEL",
                    "Moins flexible mais plus facile à lire"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Exemple Secured",
                      "simple-content": "@Secured(\"ROLE_ADMIN\")\npublic void deleteUser(Long userId) {\n    userRepository.deleteById(userId);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@RolesAllowed",
              "multi-content": [
                {
                  "title": "Description",
                  "multi-content": [
                    "Équivalent standard Java de @Secured",
                    "Nécessite une configuration supplémentaire"
                  ]
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Exemple RolesAllowed",
                      "simple-content": "@RolesAllowed({\"ROLE_ADMIN\", \"ROLE_SUPER_ADMIN\"})\npublic List<User> getAllUsers() {\n    return userRepository.findAll();\n}"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Implémentation JWT",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Le JSON Web Token (JWT) est couramment utilisé pour l'authentification sans état dans les API REST :"
        },
        {
          "title": "Structure",
          "multi-content": [
            "En-tête : Algorithme et type de jeton",
            "Charge utile : Revendications (données utilisateur, permissions)",
            "Signature : Signature de vérification"
          ]
        },
        {
          "title": "Implémentation avec Spring Security",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Configuration de Sécurité JWT",
                  "simple-content": "@Configuration\n@EnableWebSecurity\npublic class JwtSecurityConfig {\n    \n    @Autowired\n    private JwtTokenProvider tokenProvider;\n    \n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf(csrf -> csrf.disable())\n            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n            .authorizeHttpRequests(authz -> authz\n                .requestMatchers(\"/auth/**\").permitAll()\n                .anyRequest().authenticated()\n            )\n            .addFilterBefore(new JwtTokenFilter(tokenProvider), UsernamePasswordAuthenticationFilter.class);\n            \n        return http.build();\n    }\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "OAuth2 et OpenID Connect",
      "multi-content": [
        {
          "title": "Types de Flux OAuth2",
          "multi-content": [
            "Code d'Autorisation : Le plus sécurisé pour les applications serveur",
            "Implicite : Pour les applications basées sur navigateur",
            "Identifiants du Propriétaire de la Ressource : Nom d'utilisateur/mot de passe direct (obsolète)",
            "Identifiants du Client : Pour la communication service à service"
          ]
        },
        {
          "title": "Configuration du Client OAuth2 dans Spring Boot",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Propriétés d'Application",
                  "simple-content": "# application.properties\nspring.security.oauth2.client.registration.github.client-id=client-id\nspring.security.oauth2.client.registration.github.client-secret=client-secret"
                },
                {
                  "title": "Configuration de Sécurité OAuth2",
                  "simple-content": "@Configuration\n@EnableWebSecurity\npublic class OAuth2SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -> authz\n                .anyRequest().authenticated()\n            )\n            .oauth2Login(oauth2 -> oauth2\n                .loginPage(\"/login\")\n            );\n            \n        return http.build();\n    }\n}"
                }
              ]
            }
          ]
        },
        {
          "title": "OpenID Connect",
          "multi-content": [
            "Extension d'OAuth2 pour l'authentification",
            "Fournit des informations utilisateur standardisées",
            "Renvoie un jeton d'ID avec les détails de l'utilisateur"
          ]
        }
      ]
    },
    {
      "title": "Modèles de Sécurité Courants",
      "multi-content": [
        {
          "title": "Protection CSRF",
          "multi-content": [
            {
              "title": "Description",
              "multi-content": [
                "Protection contre les falsifications de requêtes inter-sites",
                "Implémentée par défaut dans Spring Security",
                "Utilise des jetons pour vérifier les requêtes légitimes"
              ]
            }
          ]
        },
        {
          "title": "Prévention XSS",
          "multi-content": [
            {
              "title": "Description",
              "multi-content": [
                "Protection contre les scripts intersites",
                "Échapper les données de sortie",
                "En-têtes de Politique de Sécurité du Contenu"
              ]
            }
          ]
        },
        {
          "title": "Partage de Ressources Cross-Origin (CORS)",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Configuration CORS",
                  "simple-content": "@Bean\npublic CorsConfigurationSource corsConfigurationSource() {\n    CorsConfiguration configuration = new CorsConfiguration();\n    configuration.setAllowedOrigins(Arrays.asList(\"https://example.com\"));\n    configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\"));\n    configuration.setAllowCredentials(true);\n    \n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    source.registerCorsConfiguration(\"/**\", configuration);\n    return source;\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Tests de Sécurité",
      "multi-content": [
        {
          "title": "Tests Unitaires",
          "multi-content": [
            {
              "title": "code_examples",
              "multi-content": [
                {
                  "title": "Exemple de Test de Sécurité",
                  "simple-content": "@WebMvcTest(UserController.class)\n@WithMockUser(roles = \"ADMIN\")\npublic class UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n    \n    @Test\n    public void shouldGetUserDetailsWhenAuthorized() throws Exception {\n        mockMvc.perform(get(\"/api/users/1\"))\n               .andExpect(status().isOk());\n    }\n    \n    @Test\n    @WithAnonymousUser\n    public void shouldDenyAccessWhenNotAuthenticated() throws Exception {\n        mockMvc.perform(get(\"/api/users/1\"))\n               .andExpect(status().isUnauthorized());\n    }\n}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Bonnes Pratiques",
      "multi-content": [
        {
          "title": "Recommandations de Sécurité",
          "multi-content": [
            "Utiliser bcrypt pour le stockage des mots de passe",
            "Implémenter une authentification appropriée pour tous les points d'accès",
            "Appliquer le principe du moindre privilège",
            "Activer HTTPS pour toutes les communications",
            "Maintenir à jour les dépendances de sécurité",
            "Implémenter une journalisation appropriée pour les événements de sécurité",
            "Utiliser la sécurité au niveau des méthodes pour un contrôle précis",
            "Tester minutieusement l'implémentation de la sécurité",
            "Ne pas stocker de données sensibles dans les jetons JWT",
            "Définir des temps d'expiration appropriés pour les jetons"
          ]
        }
      ]
    },
    {
      "title": "Questions Courantes d'Entretien",
      "multi-content": [
        {
          "title": "Questions",
          "multi-content": [
            "Quelle est la différence entre l'authentification et l'autorisation dans Spring Security ?",
            "Comment implémenteriez-vous l'authentification JWT dans Spring Boot ?",
            "Expliquez la chaîne de filtres de sécurité dans Spring Security.",
            "Quelles sont les différentes façons de sécuriser les méthodes dans Spring ?",
            "Comment fonctionne l'intégration OAuth2 dans Spring Security ?",
            "Comment géreriez-vous CORS dans une application Spring Security ?",
            "Quel est le rôle de UserDetailsService dans Spring Security ?",
            "Comment implémenteriez-vous un contrôle d'accès basé sur les rôles ?",
            "Quelle est la différence entre @Secured et @PreAuthorize ?",
            "Comment testeriez-vous une API REST sécurisée ?"
          ]
        }
      ]
    },
    {
      "title": "Bases d'Authentification & d'Autorisation",
      "multi-content": [
        {
          "title": "Différence entre authentification et autorisation",
          "simple-content": "L'authentification vérifie l'identité d'un utilisateur (qui il est), tandis que l'autorisation détermine quelles ressources un utilisateur authentifié peut accéder (ce qu'il peut faire). Spring Security gère ces aspects séparément avec des gestionnaires d'authentification et des gestionnaires de décision d'accès."
        },
        {
          "title": "Flux d'authentification de Spring Security",
          "simple-content": "Le processus d'authentification passe par des filtres de sécurité. D'abord, les identifiants sont extraits de la requête, puis transmis à AuthenticationManager, qui délègue aux AuthenticationProviders. Une fois authentifié, le SecurityContext stocke l'objet d'authentification pour le thread actuel."
        },
        {
          "title": "Méthodes d'authentification prises en charge par Spring Security",
          "simple-content": "Spring Security prend en charge l'authentification basée sur formulaire, l'authentification HTTP Basic/Digest, l'authentification par certificat X.509, OAuth2/OpenID Connect, l'authentification LDAP et les méthodes d'authentification personnalisées."
        }
      ]
    },
    {
      "title": "Configuration & Implémentation",
      "multi-content": [
        {
          "title": "Configuration de Spring Security dans une application Spring Boot moderne",
          "simple-content": "La configuration moderne utilise un bean SecurityFilterChain avec une configuration fonctionnelle au lieu d'étendre WebSecurityConfigurerAdapter (qui est déprécié). La configuration inclut la définition des règles d'autorisation, des méthodes d'authentification, des paramètres CSRF et d'autres fonctionnalités de sécurité."
        },
        {
          "title": "Explication de la chaîne de filtres de sécurité",
          "simple-content": "La chaîne de filtres de sécurité est une série de filtres servlet qui traitent les aspects liés à la sécurité des requêtes HTTP. Les filtres gèrent des tâches comme l'authentification, l'autorisation, la gestion de session, la protection CSRF, etc. Chaque filtre a une responsabilité spécifique et ils s'exécutent dans un ordre défini."
        },
        {
          "title": "Implémentation de la sécurité au niveau des méthodes",
          "simple-content": "Activez la sécurité des méthodes avec `@EnableMethodSecurity` (ou l'ancien `@EnableGlobalMethodSecurity`) et utilisez des annotations comme `@PreAuthorize`, `@PostAuthorize`, `@Secured` ou `@RolesAllowed` sur les méthodes de service pour appliquer des règles de sécurité."
        }
      ]
    },
    {
      "title": "Authentification Basée sur les Jetons",
      "multi-content": [
        {
          "title": "Implémentation de l'authentification JWT",
          "simple-content": "Implémentez JWT en créant un filtre personnalisé qui valide les jetons JWT, extrait les détails et les autorités de l'utilisateur, et définit le SecurityContext. Configurez ce filtre avant UsernamePasswordAuthenticationFilter et implémentez une politique de session sans état."
        },
        {
          "title": "Différences entre OAuth2 et JWT",
          "simple-content": "OAuth2 est un protocole d'autorisation qui définit comment les applications tierces peuvent accéder aux ressources, tandis que JWT est un format de jeton. OAuth2 peut utiliser JWT comme format de jeton mais n'y est pas limité. OAuth2 implique des serveurs d'autorisation, tandis que JWT est autonome."
        },
        {
          "title": "Gestion de l'expiration et du renouvellement des jetons JWT",
          "simple-content": "Pour le renouvellement des jetons, implémentez un mécanisme de jeton de rafraîchissement où les clients peuvent échanger un jeton de rafraîchissement contre un nouveau jeton d'accès. Pour l'expiration, validez l'expiration du jeton pendant l'authentification et renvoyez un code 401 Non autorisé lorsque les jetons expirent."
        }
      ]
    },
    {
      "title": "OAuth2 & Gestion d'Identité",
      "multi-content": [
        {
          "title": "Intégration de Spring Security avec OAuth2 et OpenID Connect",
          "simple-content": "Spring Security fournit un support intégré via les modules Spring Security OAuth2. Pour les clients OAuth2, utilisez `@EnableOAuth2Client` et configurez l'enregistrement du client. Pour les serveurs de ressources, utilisez `@EnableResourceServer` et configurez la validation du jeton."
        },
        {
          "title": "Intégration entre Spring Security et Keycloak",
          "simple-content": "L'intégration implique l'ajout de dépendances d'adaptateur Keycloak et la configuration de l'application pour utiliser Keycloak comme fournisseur OAuth2/OpenID. Spring Security déléguera l'authentification à Keycloak et utilisera des jetons pour l'autorisation."
        },
        {
          "title": "SAML vs OAuth2",
          "simple-content": "SAML (Security Assertion Markup Language) est une norme basée sur XML pour l'échange de données d'authentification et d'autorisation. Contrairement à OAuth2, SAML est principalement utilisé pour l'authentification unique en entreprise plutôt que pour l'autorisation d'API. Il utilise XML au lieu de JSON et est plus complexe mais fournit des informations d'identité riches."
        }
      ]
    },
    {
      "title": "Préoccupations de Sécurité Transversales",
      "multi-content": [
        {
          "title": "Gestion de CORS dans une application Spring Security",
          "simple-content": "Configurez CORS globalement en définissant un bean `CorsConfigurationSource`, ou au niveau du contrôleur en utilisant `@CrossOrigin`. Spring Security s'intègre à cette configuration via la méthode `.cors()` dans la configuration de sécurité."
        },
        {
          "title": "Protection CSRF dans Spring Security",
          "simple-content": "La protection CSRF (Cross-Site Request Forgery) empêche les attaquants d'effectuer des requêtes non autorisées au nom des utilisateurs. Spring Security implémente cela en générant des jetons qui doivent être inclus dans les formulaires et les requêtes non-GET. C'est activé par défaut avec la configuration `.csrf()`."
        },
        {
          "title": "Protection contre les attaques XSS",
          "simple-content": "Protégez contre les attaques XSS (Cross-Site Scripting) en :\n\n- Utilisant l'encodage automatique de sortie de Spring dans les templates\n- Implémentant des en-têtes Content-Security-Policy\n- Validant et assainissant les données d'entrée\n- Définissant des indicateurs de sécurité appropriés pour les cookies (HttpOnly, Secure)\n- Utilisant les valeurs par défaut des en-têtes de Spring Security avec la configuration `.headers()`"
        }
      ]
    },
    {
      "title": "Sujets Avancés",
      "multi-content": [
        {
          "title": "Spring Security dans l'architecture microservices",
          "simple-content": "Dans les microservices, implémentez OAuth2 avec des jetons JWT pour l'authentification sans état entre les services. Utilisez un serveur d'autorisation OAuth2 pour l'authentification centralisée, et configurez chaque service comme serveur de ressources. Propagez les jetons entre les services et validez-les indépendamment."
        },
        {
          "title": "Considérations de sécurité pour les API RESTful",
          "simple-content": "Les considérations clés incluent l'utilisation de HTTPS, l'implémentation d'une authentification appropriée (généralement OAuth2 ou JWT), l'application de l'autorisation pour tous les points d'accès, la sécurisation des données sensibles, l'implémentation de limitations de débit, la validation de toutes les entrées et la gestion sécurisée des erreurs."
        },
        {
          "title": "Sécurité basée sur les rôles vs basée sur les permissions",
          "simple-content": "La sécurité basée sur les rôles attribue aux utilisateurs des rôles et accorde l'accès en fonction de ces rôles (en utilisant les expressions hasRole()). La sécurité basée sur les permissions est plus granulaire, assignant des permissions spécifiques aux utilisateurs et les vérifiant (en utilisant les expressions hasAuthority()). Cette dernière est plus flexible mais plus complexe à gérer."
        }
      ]
    }
  ]
}