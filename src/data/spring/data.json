{
  "title": "Spring Data",
  "topics": [
    {
      "id": "spring-data-jpa",
      "title": "Spring Data JPA",
      "concepts": [
        {
          "name": "JpaRepository",
          "description": "Base interface providing CRUD operations",
          "methods": [
            {
              "name": "save",
              "usage": "Save an entity",
              "example": "userRepository.save(user);"
            },
            {
              "name": "findById",
              "usage": "Find entity by primary key",
              "example": "userRepository.findById(1L);"
            },
            {
              "name": "findAll",
              "usage": "Retrieve all entities",
              "example": "userRepository.findAll();"
            },
            {
              "name": "delete",
              "usage": "Delete an entity",
              "example": "userRepository.delete(user);"
            }
          ],
          "implementation": {
            "code": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    // Additional query methods\n}"
          }
        },
        {
          "name": "Query Methods",
          "description": "Methods that are automatically implemented based on method names",
          "patterns": [
            {
              "prefix": "findBy",
              "example": "findByUsername(String username)",
              "generates": "SELECT * FROM user WHERE username = ?"
            },
            {
              "prefix": "existsBy",
              "example": "existsByEmail(String email)",
              "generates": "SELECT EXISTS(SELECT 1 FROM user WHERE email = ?)"
            },
            {
              "prefix": "countBy",
              "example": "countByStatus(String status)",
              "generates": "SELECT COUNT(*) FROM user WHERE status = ?"
            }
          ],
          "operators": [
            {
              "name": "And",
              "example": "findByFirstNameAndLastName"
            },
            {
              "name": "Or",
              "example": "findByEmailOrPhone"
            },
            {
              "name": "Between",
              "example": "findByAgeBetween"
            },
            {
              "name": "LessThan",
              "example": "findByAgeLessThan"
            },
            {
              "name": "GreaterThan",
              "example": "findByAgeGreaterThan"
            },
            {
              "name": "Like",
              "example": "findByNameLike"
            },
            {
              "name": "OrderBy",
              "example": "findByAgeOrderByNameDesc"
            }
          ]
        }
      ]
    },
    {
      "id": "custom-queries",
      "title": "Custom Queries",
      "types": [
        {
          "name": "@Query Annotation",
          "description": "Define custom JPQL or native SQL queries",
          "examples": [
            {
              "description": "JPQL Query",
              "code": "@Query(\"SELECT u FROM User u WHERE u.status = :status\")\nList<User> findActiveUsers(@Param(\"status\") String status);"
            },
            {
              "description": "Native Query",
              "code": "@Query(value = \"SELECT * FROM users WHERE status = ?1\", nativeQuery = true)\nList<User> findActiveUsersNative(String status);"
            },
            {
              "description": "Update Query",
              "code": "@Modifying\n@Query(\"UPDATE User u SET u.status = :status WHERE u.id = :id\")\nint updateUserStatus(@Param(\"id\") Long id, @Param(\"status\") String status);"
            }
          ]
        },
        {
          "name": "Specifications",
          "description": "Type-safe way to create dynamic queries",
          "example": {
            "code": "public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> { }\n\nSpecification<User> spec = (root, query, cb) ->\n    cb.equal(root.get(\"status\"), \"ACTIVE\");\n\nList<User> users = repository.findAll(spec);"
          }
        }
      ]
    },
    {
      "id": "pagination-sorting",
      "title": "Pagination and Sorting",
      "features": [
        {
          "name": "Pageable",
          "description": "Interface for pagination information",
          "example": {
            "code": "Page<User> findByStatus(String status, Pageable pageable);\n\n// Usage\nPageable pageable = PageRequest.of(0, 20, Sort.by(\"name\"));\nPage<User> userPage = repository.findByStatus(\"ACTIVE\", pageable);"
          }
        },
        {
          "name": "Sort",
          "description": "Sorting functionality",
          "example": {
            "code": "Sort sort = Sort.by(\"lastName\").ascending().and(Sort.by(\"firstName\"));\nList<User> users = repository.findAll(sort);"
          }
        }
      ]
    },
    {
      "id": "transactions",
      "title": "Transaction Management",
      "concepts": [
        {
          "name": "@Transactional",
          "description": "Declarative transaction management",
          "attributes": [
            {
              "name": "propagation",
              "values": [
                "REQUIRED (default)",
                "REQUIRES_NEW",
                "SUPPORTS",
                "NOT_SUPPORTED",
                "MANDATORY",
                "NEVER"
              ]
            },
            {
              "name": "isolation",
              "values": [
                "DEFAULT",
                "READ_UNCOMMITTED",
                "READ_COMMITTED",
                "REPEATABLE_READ",
                "SERIALIZABLE"
              ]
            }
          ],
          "example": {
            "code": "@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED)\npublic void transferMoney(Account from, Account to, BigDecimal amount) {\n    from.debit(amount);\n    to.credit(amount);\n    accountRepository.saveAll(Arrays.asList(from, to));\n}"
          }
        }
      ]
    },
    {
      "id": "auditing",
      "title": "Auditing",
      "features": [
        {
          "name": "JPA Auditing",
          "description": "Automatic tracking of entity changes",
          "setup": {
            "code": "@EnableJpaAuditing\n@Configuration\npublic class JpaConfig { }\n\n@EntityListeners(AuditingEntityListener.class)\n@MappedSuperclass\npublic class Auditable {\n    @CreatedDate\n    private Instant createdDate;\n\n    @LastModifiedDate\n    private Instant lastModifiedDate;\n\n    @CreatedBy\n    private String createdBy;\n\n    @LastModifiedBy\n    private String lastModifiedBy;\n}"
          }
        }
      ]
    },
    {
      "id": "projections",
      "title": "Projections",
      "types": [
        {
          "name": "Interface Projection",
          "description": "Define custom view of entities",
          "example": {
            "code": "public interface UserSummary {\n    String getUsername();\n    String getEmail();\n}\n\npublic interface UserRepository extends JpaRepository<User, Long> {\n    List<UserSummary> findByStatus(String status);\n}"
          }
        },
        {
          "name": "Class Projection",
          "description": "DTO projection using constructor",
          "example": {
            "code": "public class UserDTO {\n    private final String username;\n    private final String email;\n\n    public UserDTO(String username, String email) {\n        this.username = username;\n        this.email = email;\n    }\n}"
          }
        }
      ]
    },
    {
      "id": "best-practices",
      "title": "Best Practices",
      "categories": [
        {
          "name": "Repository Design",
          "practices": [
            "Keep repositories focused and specific",
            "Use appropriate interfaces (CrudRepository, JpaRepository)",
            "Leverage query methods for simple queries",
            "Use @Query for complex queries"
          ]
        },
        {
          "name": "Performance",
          "practices": [
            "Use appropriate fetch types",
            "Implement pagination for large datasets",
            "Use projections when full entities aren't needed",
            "Optimize N+1 query problems"
          ]
        },
        {
          "name": "Transaction Management",
          "practices": [
            "Use appropriate transaction boundaries",
            "Set correct isolation levels",
            "Handle transaction rollbacks properly",
            "Consider using programmatic transactions for complex scenarios"
          ]
        }
      ]
    }
  ]
}