{
  "id": "graphql",
  "title": "GraphQL",
  "topics": [
    {
      "title": "Aperçu des Concepts Fondamentaux",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "GraphQL est un langage de requête et un environnement d'exécution pour les API qui permet aux clients de demander exactement les données dont ils ont besoin. Contrairement à REST, GraphQL utilise un point d'accès unique où les clients définissent la structure de la réponse."
        },
        {
          "title": "Fonctionnalités Clés",
          "multi-content": [
            "Définition de Schéma: Définir les types et opérations disponibles",
            "Résolveurs: Implémenter la logique de récupération des données",
            "Requêtes: Demander des données au serveur",
            "Mutations: Modifier les données du serveur",
            "Problème N+1: Défi d'optimisation des performances",
            "Abonnements: Mises à jour en temps réel",
            "Gestion des Erreurs: Gérer les erreurs d'API",
            "Sécurité: Protéger les points d'accès GraphQL",
            "Tests: Valider les implémentations GraphQL"
          ]
        }
      ]
    },
    {
      "title": "GraphQL vs REST",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "GraphQL répond à plusieurs limitations des API REST traditionnelles."
        },
        {
          "title": "Comparaison",
          "multi-content": [
            "Points d'accès: GraphQL utilise un point d'accès unique tandis que REST utilise plusieurs points d'accès",
            "Récupération des données: Dans GraphQL, le client spécifie exactement les données dont il a besoin alors qu'avec REST, le serveur détermine la structure de la réponse",
            "Sur-extraction: Éliminée dans GraphQL car le client obtient uniquement les champs demandés, courante dans REST où les points d'accès renvoient des structures de données fixes",
            "Sous-extraction: Éliminée dans GraphQL car une seule requête peut récupérer des données liées, courante dans REST qui nécessite plusieurs requêtes pour des données liées",
            "Versionnement: GraphQL fait évoluer le schéma sans versionnement tandis que REST nécessite souvent un versionnement explicite de l'API",
            "Documentation: GraphQL est auto-documenté grâce à l'introspection tandis que REST nécessite une documentation externe",
            "Contrôle de la complexité: Dans GraphQL, le client peut créer des requêtes complexes tandis que dans REST, le serveur définit une complexité fixe des points d'accès"
          ]
        },
        {
          "title": "Avantages",
          "multi-content": [
            "Exigences de Données Flexibles: Les clients demandent précisément ce dont ils ont besoin",
            "Trafic Réseau Réduit: Minimise le transfert de données en éliminant la sur-extraction",
            "Schéma Fortement Typé: Fournit un contrat clair entre le client et le serveur",
            "Introspection: API auto-documentée grâce à l'exploration du schéma",
            "Évolution Sans Ruptures: Ajout de champs sans affecter les clients existants"
          ]
        }
      ]
    },
    {
      "title": "Définition du Schéma",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Le schéma GraphQL définit les capacités de l'API en utilisant le Langage de Définition de Schéma (SDL)."
        },
        {
          "title": "Types de Base",
          "simple-content": "GraphQL possède des types scalaires (Int, Float, String, Boolean, ID) et des types d'objets qui représentent des objets du domaine."
        },
        {
          "title": "Modificateurs de Type",
          "multi-content": [
            "`!` - Champ non nullable",
            "`[Type]` - Liste de Type",
            "`[Type!]` - Liste de Type non nullable",
            "`[Type!]!` - Liste non nullable de Type non nullable"
          ]
        },
        {
          "title": "Opérations",
          "simple-content": "Les opérations GraphQL incluent Query (récupération de données), Mutation (modification de données) et Subscription (mises à jour en temps réel)."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Types de Base",
              "simple-content": "# Scalar types\nInt\nFloat\nString\nBoolean\nID\n\n# Object type\ntype User {\n  id: ID!\n  name: String!\n  email: String\n  posts: [Post!]\n}\n\n# Input type (used for arguments)\ninput UserInput {\n  name: String!\n  email: String!\n}"
            },
            {
              "title": "Opérations",
              "simple-content": "# Schema with operations\ntype Query {\n  user(id: ID!): User\n  users: [User!]!\n}\n\ntype Mutation {\n  createUser(input: UserInput!): User!\n  updateUser(id: ID!, input: UserInput!): User!\n}\n\ntype Subscription {\n  userCreated: User!\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Implémentation Spring GraphQL",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Spring fournit un support de première classe pour GraphQL à travers le projet Spring for GraphQL."
        },
        {
          "title": "Annotations Principales",
          "multi-content": [
            "`@QueryMapping`: Associe une méthode à un champ Query",
            "`@MutationMapping`: Associe une méthode à un champ Mutation",
            "`@SubscriptionMapping`: Associe une méthode à un champ Subscription",
            "`@SchemaMapping`: Associe une méthode à un champ spécifique dans un type",
            "`@Argument`: Lie un paramètre de méthode à un argument GraphQL",
            "`@BatchMapping`: Optimise le chargement d'objets liés par lots"
          ]
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Configuration",
              "simple-content": "@Configuration\npublic class GraphQLConfig {\n    @Bean\n    public GraphQlSource graphQlSource() {\n        // Load schema from classpath resources\n        return GraphQlSource.builder()\n            .schemaResources(\"classpath:graphql/schema.graphqls\")\n            .build();\n    }\n}"
            },
            {
              "title": "Dépendances",
              "simple-content": "<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-graphql</artifactId>\n</dependency>"
            },
            {
              "title": "Contrôleurs & Résolveurs",
              "simple-content": "@Controller\npublic class UserController {\n    private final UserService userService;\n    \n    @Autowired\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n    \n    @QueryMapping\n    public User user(@Argument Long id) {\n        return userService.findById(id);\n    }\n    \n    @MutationMapping\n    public User createUser(@Argument UserInput input) {\n        return userService.createUser(input);\n    }\n    \n    // Field resolver for nested objects\n    @SchemaMapping(typeName = \"User\", field = \"posts\")\n    public List<Post> getPosts(User user) {\n        return postService.findByUserId(user.getId());\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Résolveurs",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Les résolveurs sont des fonctions qui renvoient des données pour un champ spécifique dans une opération GraphQL."
        },
        {
          "title": "Types de Résolveurs",
          "multi-content": [
            "Résolveurs de Requête: Points d'entrée pour la récupération de données",
            "Résolveurs de Mutation: Points d'entrée pour la modification de données",
            "Résolveurs de Champ: Récupèrent les données liées pour les objets imbriqués",
            "Résolveurs d'Abonnement: Gèrent les mises à jour en temps réel"
          ]
        },
        {
          "title": "Ordre d'Exécution",
          "multi-content": [
            "Le résolveur de Query/Mutation/Subscription s'exécute en premier",
            "Les résolveurs de champ s'exécutent pour chaque champ demandé",
            "Chaque niveau d'imbrication crée un nouvel ensemble de résolveurs de champ"
          ]
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Chaîne de Résolveurs",
              "simple-content": "query {\n  user(id: \"1\") {  # Query resolver\n    name           # Field resolvers\n    email          # (these might be resolved from the same User object)\n    posts {        # Field resolver for nested relation\n      title        # Field resolvers\n      content      # for Post fields\n    }\n  }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Problème N+1",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "L'un des défis de performance les plus importants dans GraphQL est le problème de requête N+1. Lors de la récupération d'une liste d'objets et de leurs relations, GraphQL va: 1. Exécuter 1 requête pour récupérer la liste d'objets, 2. Exécuter N requêtes séparées pour récupérer les données liées pour chaque objet."
        },
        {
          "title": "Solutions",
          "multi-content": [
            {
              "title": "DataLoader",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "Le modèle DataLoader regroupe et met en cache les opérations de récupération de données."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implémentation",
                      "simple-content": "@Component\npublic class PostDataLoader {\n    private final PostRepository postRepository;\n    \n    public PostDataLoader(PostRepository postRepository) {\n        this.postRepository = postRepository;\n    }\n    \n    public DataLoader<Long, List<Post>> postDataLoader() {\n        return DataLoader.newDataLoader(userIds -> {\n            Map<Long, List<Post>> postsByUserId = postRepository.findByUserIdIn(userIds)\n                .stream()\n                .collect(Collectors.groupingBy(Post::getUserId));\n            \n            return CompletableFuture.supplyAsync(() -> \n                userIds.stream()\n                    .map(id -> postsByUserId.getOrDefault(id, Collections.emptyList()))\n                    .collect(Collectors.toList())\n            );\n        });\n    }\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "@BatchMapping",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "Spring GraphQL prend en charge le chargement par lots avec l'annotation `@BatchMapping`."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implémentation",
                      "simple-content": "@Controller\npublic class UserController {\n    @BatchMapping\n    public Map<User, List<Post>> posts(List<User> users) {\n        List<Long> userIds = users.stream()\n            .map(User::getId)\n            .collect(Collectors.toList());\n            \n        List<Post> allPosts = postRepository.findByUserIdIn(userIds);\n        \n        return allPosts.stream()\n            .collect(Collectors.groupingBy(\n                post -> users.stream()\n                    .filter(user -> user.getId().equals(post.getUserId()))\n                    .findFirst()\n                    .orElseThrow()\n            ));\n    }\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "Jointures",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "Lors de l'utilisation de JPA, les jointures peuvent charger des entités liées en une seule requête."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implémentation",
                      "simple-content": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    @Query(\"SELECT u FROM User u LEFT JOIN FETCH u.posts WHERE u.id IN :ids\")\n    List<User> findByIdInWithPosts(List<Long> ids);\n}"
                    }
                  ]
                }
              ]
            },
            {
              "title": "Mise en Cache",
              "multi-content": [
                {
                  "title": "Description",
                  "simple-content": "Utiliser la mise en cache au niveau de l'application pour réduire les requêtes à la base de données."
                },
                {
                  "title": "code_examples",
                  "multi-content": [
                    {
                      "title": "Implémentation",
                      "simple-content": "@Cacheable(\"users\")\npublic User findById(Long id) {\n    return userRepository.findById(id).orElseThrow();\n}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Exemple de Problème N+1",
              "simple-content": "# This query could cause an N+1 problem\nquery {\n  users {       # 1 query to fetch all users\n    name\n    posts {     # N queries (one per user) to fetch posts\n      title\n    }\n  }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Gestion des Erreurs",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "GraphQL gère les erreurs différemment des API REST, renvoyant généralement un statut 200 OK même lorsque des erreurs se produisent."
        },
        {
          "title": "Réponses Partielles",
          "simple-content": "GraphQL peut renvoyer des réponses partielles, fournissant des données pour les champs qui ont réussi tout en renvoyant des erreurs pour les champs qui ont échoué."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Format d'Erreur Standard",
              "simple-content": "{\n  \"data\": {\n    \"user\": null\n  },\n  \"errors\": [\n    {\n      \"message\": \"User with ID 123 not found\",\n      \"locations\": [{\"line\": 2, \"column\": 3}],\n      \"path\": [\"user\"],\n      \"extensions\": {\n        \"classification\": \"NOT_FOUND\"\n      }\n    }\n  ]\n}"
            },
            {
              "title": "Gestion des Erreurs avec Spring GraphQL",
              "simple-content": "@ControllerAdvice\npublic class GraphQLExceptionHandler {\n    @ExceptionHandler(UserNotFoundException.class)\n    public GraphQLError handleUserNotFound(UserNotFoundException ex) {\n        return GraphQLError.newError()\n            .message(ex.getMessage())\n            .errorType(ErrorType.NOT_FOUND)\n            .build();\n    }\n}"
            },
            {
              "title": "Exemple de Réponse Partielle",
              "simple-content": "{\n  \"data\": {\n    \"user\": {\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"posts\": null\n    }\n  },\n  \"errors\": [\n    {\n      \"message\": \"Failed to load posts\",\n      \"path\": [\"user\", \"posts\"]\n    }\n  ]\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Abonnements",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Les abonnements fournissent des mises à jour en temps réel via des connexions persistantes utilisant WebSockets."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Configuration des Abonnements",
              "simple-content": "@Configuration\npublic class WebSocketConfig {\n    @Bean\n    public WebSocketHandler graphQlWebSocketHandler(GraphQlSource graphQlSource) {\n        return GraphQlWebSocketHandler.builder(graphQlSource)\n            .build();\n    }\n    \n    @Bean\n    public HandlerMapping graphQlWebSocketHandlerMapping(WebSocketHandler graphQlWebSocketHandler) {\n        return new SimpleUrlHandlerMapping(\n            Map.of(\"/graphql-ws\", graphQlWebSocketHandler), 10);\n    }\n}"
            },
            {
              "title": "Implémentation des Résolveurs d'Abonnement",
              "simple-content": "@Controller\npublic class UserSubscriptionController {\n    private final Sinks.Many<User> userSink = Sinks.many().multicast().onBackpressureBuffer();\n    \n    @SubscriptionMapping\n    public Publisher<User> userCreated() {\n        return userSink.asFlux();\n    }\n    \n    public void publishUserCreated(User user) {\n        userSink.tryEmitNext(user);\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Sécurité",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "La sécurisation des points d'accès GraphQL nécessite une considération particulière en raison de leur flexibilité."
        },
        {
          "title": "Authentification",
          "simple-content": "Sécurisation des points d'accès GraphQL à l'aide de Spring Security pour l'authentification."
        },
        {
          "title": "Autorisation",
          "simple-content": "Sécurité au niveau des méthodes à l'aide des annotations Spring Security."
        },
        {
          "title": "Analyse de la Complexité des Requêtes",
          "simple-content": "Protection contre l'épuisement des ressources avec l'analyse de la complexité des requêtes."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Configuration de l'Authentification",
              "simple-content": "@Configuration\npublic class GraphQLSecurityConfig {\n    @Bean\n    public SecurityWebFilterChain securityFilterChain(ServerHttpSecurity http) {\n        return http\n            .authorizeExchange()\n            .pathMatchers(\"/graphql\").authenticated()\n            .and()\n            .oauth2ResourceServer().jwt()\n            .and().build();\n    }\n}"
            },
            {
              "title": "Autorisation au Niveau des Méthodes",
              "simple-content": "@Controller\npublic class SecureUserController {\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    @QueryMapping\n    public List<User> allUsers() {\n        return userService.findAll();\n    }\n    \n    @PreAuthorize(\"authentication.name == #user.email or hasRole('ADMIN')\")\n    @MutationMapping\n    public User updateUser(@Argument User user) {\n        return userService.update(user);\n    }\n}"
            },
            {
              "title": "Configuration de la Complexité des Requêtes",
              "simple-content": "@Bean\npublic GraphQlSource graphQlSource() {\n    return GraphQlSource.builder()\n        .schemaResources(\"classpath:graphql/schema.graphqls\")\n        .instrumentation(new MaxQueryComplexityInstrumentation(100))\n        .build();\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Tests",
      "multi-content": [
        {
          "title": "Description",
          "simple-content": "Des tests complets des API GraphQL sont essentiels pour la fiabilité."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Utilisation de GraphQlTester",
              "simple-content": "@SpringBootTest\n@AutoConfigureGraphQlTester\nclass UserControllerTests {\n    @Autowired\n    private GraphQlTester graphQlTester;\n    \n    @Test\n    void shouldGetUserById() {\n        // Given\n        String query = \"\"\"\n            query {\n              user(id: \"1\") {\n                name\n                email\n              }\n            }\n            \"\"\";\n            \n        // When & Then\n        graphQlTester.document(query)\n            .execute()\n            .path(\"user.name\")\n            .entity(String.class)\n            .isEqualTo(\"John Doe\")\n            .path(\"user.email\")\n            .entity(String.class)\n            .isEqualTo(\"john@example.com\");\n    }\n}"
            },
            {
              "title": "Test des Mutations",
              "simple-content": "@Test\nvoid shouldCreateUser() {\n    // Given\n    String mutation = \"\"\"\n        mutation {\n          createUser(input: {name: \"Jane Doe\", email: \"jane@example.com\"}) {\n            id\n            name\n            email\n          }\n        }\n        \"\"\";\n        \n    // When & Then\n    graphQlTester.document(mutation)\n        .execute()\n        .path(\"createUser.name\")\n        .entity(String.class)\n        .isEqualTo(\"Jane Doe\");\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Bonnes Pratiques",
      "multi-content": [
        {
          "title": "Conception du Schéma",
          "multi-content": [
            "Conception du Schéma d'Abord: Commencer par le schéma avant l'implémentation",
            "Utiliser la Terminologie du Domaine: Rendre les noms de champs clairs et cohérents",
            "Regrouper les Champs Liés: Organiser les champs de manière logique au sein des types",
            "Considérer la Pagination: Concevoir pour l'évolutivité dès le départ",
            "Nullabilité Appropriée: Marquer les champs comme non null (`!`) lorsque c'est approprié"
          ]
        },
        {
          "title": "Optimisation des Performances",
          "multi-content": [
            "Implémenter DataLoader: Toujours utiliser DataLoader ou le chargement par lots",
            "Sélectionner Uniquement les Champs Nécessaires: Au niveau de la base de données, sélectionner uniquement les colonnes requises",
            "Utiliser la Mise en Cache: Implémenter des stratégies de mise en cache appropriées",
            "Surveiller la Complexité des Requêtes: Implémenter l'analyse de complexité",
            "Utiliser le Modèle de Connexion: Pour la pagination de grands ensembles de résultats"
          ]
        },
        {
          "title": "Gestion des Erreurs",
          "multi-content": [
            "Format d'Erreur Cohérent: Standardiser les réponses d'erreur",
            "Messages Détaillés: Fournir des messages d'erreur exploitables",
            "Classification des Erreurs: Catégoriser les erreurs (par exemple, NOT_FOUND, VALIDATION)",
            "Éviter d'Exposer les Détails Internes: Ne pas divulguer les détails d'implémentation"
          ]
        }
      ]
    },
    {
      "title": "FAQ d'Entretien",
      "multi-content": [
        {
          "title": "Qu'est-ce que GraphQL et en quoi diffère-t-il de REST?",
          "simple-content": "GraphQL est un langage de requête pour les API qui permet aux clients de demander exactement les données dont ils ont besoin. Contrairement à REST, qui possède plusieurs points d'accès renvoyant des structures de données fixes, GraphQL utilise un point d'accès unique où les clients définissent la structure de la réponse. Cela élimine la sur-extraction et la sous-extraction de données, réduit la surcharge réseau et donne plus de flexibilité aux clients."
        },
        {
          "title": "Comment implémenter GraphQL dans une application Spring Boot?",
          "multi-content": [
            "Ajouter les dépendances Spring GraphQL",
            "Définir un schéma GraphQL en utilisant SDL dans des fichiers `.graphqls`",
            "Créer des classes de contrôleur avec l'annotation `@Controller`",
            "Implémenter des résolveurs de requête avec l'annotation `@QueryMapping`",
            "Implémenter des résolveurs de mutation avec l'annotation `@MutationMapping`",
            "Utiliser `@SchemaMapping` pour les résolveurs de champ",
            "Configurer GraphQL dans `application.properties` ou la configuration Java"
          ]
        },
        {
          "title": "Comment gérer le problème N+1 dans GraphQL?",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "Le problème N+1 se produit lors de la récupération d'une liste d'objets et de leurs relations, causant une requête pour la liste et N requêtes pour les relations."
            },
            {
              "title": "Solutions",
              "multi-content": [
                "Modèle DataLoader: Regroupement et mise en cache des opérations de récupération de données liées",
                "BatchMapping: Annotation de Spring GraphQL pour le chargement par lots",
                "Jointures: Utilisation de JPA pour charger des entités liées en une seule requête",
                "Mise en cache: Mise en cache au niveau de l'application pour réduire les requêtes à la base de données"
              ]
            }
          ]
        },
        {
          "title": "Que sont les résolveurs dans GraphQL?",
          "simple-content": "Les résolveurs sont des fonctions qui renvoient des données pour des champs spécifiques dans une opération GraphQL. Ils sont responsables de la récupération des données à partir de diverses sources (bases de données, API, etc.) et de leur retour dans le format défini par le schéma. Les résolveurs sont organisés en chaîne, avec des résolveurs de requête/mutation au sommet et des résolveurs de champ gérant les objets imbriqués."
        },
        {
          "title": "Comment gérer la sécurité dans GraphQL?",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "La sécurité GraphQL nécessite plusieurs couches."
            },
            {
              "title": "Mesures de Sécurité",
              "multi-content": [
                "Authentification: Sécuriser le point d'accès `/graphql` à l'aide de Spring Security",
                "Autorisation: Utiliser `@PreAuthorize` pour la sécurité au niveau des méthodes",
                "Analyse de la complexité des requêtes: Prévenir l'épuisement des ressources",
                "Limitation du débit: Limiter les requêtes par client",
                "Validation des entrées: Valider toutes les entrées utilisateur",
                "Contrôle d'accès au niveau des champs: Contrôler l'accès à des champs spécifiques"
              ]
            }
          ]
        },
        {
          "title": "Que sont les abonnements GraphQL et comment les implémenter?",
          "multi-content": [
            {
              "title": "Description",
              "simple-content": "Les abonnements fournissent des mises à jour en temps réel via des connexions persistantes, généralement en utilisant WebSockets."
            },
            {
              "title": "Étapes d'Implémentation",
              "multi-content": [
                "Configurer le support WebSocket",
                "Créer des résolveurs d'abonnement avec `@SubscriptionMapping`",
                "Utiliser des types réactifs (Publisher/Flux) pour émettre des événements",
                "Publier des événements lorsque les données changent",
                "Les clients s'abonnent pour recevoir des mises à jour"
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "Sujets Avancés",
      "multi-content": [
        {
          "title": "Fédération de Schéma",
          "simple-content": "Technique pour combiner plusieurs schémas GraphQL en un graphe unifié."
        },
        {
          "title": "Scalaires Personnalisés",
          "simple-content": "Définition de types scalaires personnalisés pour des formats de données spécialisés comme Date/Heure."
        },
        {
          "title": "Directives de Schéma",
          "simple-content": "Annotations spéciales dans le schéma qui modifient le comportement d'exécution."
        },
        {
          "title": "code_examples",
          "multi-content": [
            {
              "title": "Configuration de Fédération de Schéma",
              "simple-content": "@Configuration\npublic class GraphQlFederationConfig {\n    @Bean\n    public FederatedSchemaRegistrar federatedSchemaRegistrar() {\n        return new FederatedSchemaRegistrar();\n    }\n}"
            },
            {
              "title": "Implémentation de Scalaire Personnalisé",
              "simple-content": "@Component\npublic class DateTimeScalarConfiguration {\n    @Bean\n    public GraphQLScalarType dateTimeScalar() {\n        return GraphQLScalarType.newScalar()\n            .name(\"DateTime\")\n            .description(\"ISO-8601 DateTime Scalar\")\n            .coercing(new DateTimeCoercing())\n            .build();\n    }\n}"
            },
            {
              "title": "Exemple de Directive de Schéma",
              "simple-content": "directive @auth(role: String!) on FIELD_DEFINITION\n\ntype Query {\n  sensitiveData: String @auth(role: \"ADMIN\")\n}"
            }
          ]
        }
      ]
    },
    {
      "title": "Sujets Connexes",
      "multi-content": [
        {
          "title": "Liens",
          "multi-content": [
            "API REST",
            "Spring Boot",
            "Fonctionnalités Java 8+",
            "Spring Security",
            "Optimisation des Performances"
          ]
        }
      ]
    }
  ]
}