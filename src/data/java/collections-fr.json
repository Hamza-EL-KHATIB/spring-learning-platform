{
  "title": "Cadriciel des Collections Java",
  "topics": [
    {
      "id": "collection-types",
      "title": "Types de Collections",
      "description": "Le Java Collections Framework fournit un ensemble de classes et d'interfaces pour travailler avec des groupes d'objets de différentes manières.",
      "types": [
        {
          "type": "List",
          "description": "Une collection ordonnée qui autorise les éléments dupliqués.",
          "implementations": [
            {
              "name": "ArrayList",
              "characteristics": [
                "Implémentation de tableau dynamique",
                "Accès aléatoire rapide",
                "Insertions/suppressions lentes au milieu",
                "Non sécurisé pour les accès concurrents"
              ]
            },
            {
              "name": "LinkedList",
              "characteristics": [
                "Implémentation de liste doublement chaînée",
                "Insertions/suppressions rapides",
                "Accès aléatoire lent",
                "Utilisation mémoire plus élevée"
              ]
            }
          ]
        },
        {
          "type": "Set",
          "description": "Une collection qui n'autorise pas les éléments dupliqués.",
          "implementations": [
            {
              "name": "HashSet",
              "characteristics": [
                "Basé sur un HashMap",
                "Aucun doublon autorisé",
                "Ordre non garanti",
                "Opérations O(1) pour l'ajout, la suppression et la vérification"
              ]
            },
            {
              "name": "TreeSet",
              "characteristics": [
                "Implémente NavigableSet",
                "Stocke les éléments dans un ordre trié",
                "Complexité O(log n) pour les opérations",
                "Aucun doublon autorisé"
              ]
            },
            {
              "name": "LinkedHashSet",
              "characteristics": [
                "Maintient l'ordre d'insertion",
                "Opérations O(1) pour l'ajout, la suppression et la vérification",
                "Utilisation mémoire plus élevée en raison du support par liste chaînée"
              ]
            }
          ]
        },
        {
          "type": "Queue",
          "description": "Une collection utilisée pour contenir plusieurs éléments avant traitement, généralement en ordre FIFO.",
          "implementations": [
            {
              "name": "PriorityQueue",
              "characteristics": [
                "Ordonne les éléments en fonction de leur priorité",
                "Non sécurisé pour les accès concurrents",
                "Complexité O(log n) pour les insertions"
              ]
            },
            {
              "name": "LinkedList",
              "characteristics": [
                "Peut également être utilisée comme implémentation de Queue",
                "Comportement FIFO pour les opérations de file d'attente",
                "Structure doublement chaînée permettant des ajouts/suppressions rapides"
              ]
            }
          ]
        },
        {
          "type": "Map",
          "description": "Un objet qui associe des clés à des valeurs, sans autoriser de clés dupliquées.",
          "implementations": [
            {
              "name": "HashMap",
              "characteristics": [
                "Ordre non garanti",
                "Autorise les clés et valeurs nulles",
                "Non sécurisé pour les accès concurrents",
                "Complexité O(1) pour les opérations de base"
              ]
            },
            {
              "name": "TreeMap",
              "characteristics": [
                "Stocke les clés dans un ordre trié",
                "Complexité O(log n) pour les opérations",
                "Aucune clé nulle autorisée"
              ]
            },
            {
              "name": "LinkedHashMap",
              "characteristics": [
                "Maintient l'ordre d'insertion",
                "Utilisation mémoire plus élevée en raison du support par liste chaînée",
                "Complexité O(1) pour les opérations"
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "collection-performance",
      "title": "Performance des Collections",
      "description": "Une comparaison des caractéristiques de performance pour divers types de collections en termes de temps d'accès, d'insertion, de suppression et de surcharge mémoire.",
      "performance": [
        {
          "type": "ArrayList",
          "accessTime": "O(1)",
          "insertTime": "O(n) (au milieu)",
          "deleteTime": "O(n) (au milieu)",
          "memoryOverhead": "Faible"
        },
        {
          "type": "LinkedList",
          "accessTime": "O(n)",
          "insertTime": "O(1)",
          "deleteTime": "O(1)",
          "memoryOverhead": "Élevée"
        },
        {
          "type": "HashSet",
          "accessTime": "O(1)",
          "insertTime": "O(1)",
          "deleteTime": "O(1)",
          "memoryOverhead": "Moyenne"
        },
        {
          "type": "TreeSet",
          "accessTime": "O(log n)",
          "insertTime": "O(log n)",
          "deleteTime": "O(log n)",
          "memoryOverhead": "Élevée"
        }
      ]
    }
  ]
}
