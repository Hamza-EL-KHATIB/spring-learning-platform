{
  "definitions": {
    "title": "Java Core Definitions",
    "description": "A comprehensive list of core concepts and terminology in Java.",
    "topics": [
      {
        "id": "oop-principles",
        "title": "Object-Oriented Programming Principles",
        "description": "Core OOP principles that Java is based on: encapsulation, inheritance, polymorphism, and abstraction.",
        "details": [
          {
            "principle": "Encapsulation",
            "definition": "Encapsulating data and behavior into a single unit or class and restricting access to some components.",
            "example": "Using private fields with public getter/setter methods."
          },
          {
            "principle": "Inheritance",
            "definition": "A mechanism where one class can inherit fields and methods from another class.",
            "example": "A class `Dog` that inherits from `Animal`."
          },
          {
            "principle": "Polymorphism",
            "definition": "The ability of an object to take on multiple forms. In Java, we distinguish static polymorphism (method overloading, resolved at compile-time) and dynamic polymorphism (method overriding, resolved at runtime).",
            "example": "A `Shape` interface implemented by `Circle` and `Square` classes, where the `draw()` method behaves differently based on the actual object."
          },
          {
            "principle": "Abstraction",
            "definition": "Hiding the complex implementation details and showing only the essential features.",
            "example": "Using abstract classes or interfaces."
          }
        ]
      },
      {
        "id": "jvm-architecture",
        "title": "Java Virtual Machine (JVM) Architecture",
        "description": "Components and operation of the JVM, including Class Loader, Runtime Data Area, and Execution Engine.",
        "components": [
          {
            "name": "Class Loader",
            "function": "Loads, links, and initializes classes in the JVM.",
            "stages": [
              "Loading",
              "Linking",
              "Initialization"
            ]
          },
          {
            "name": "Runtime Data Area",
            "function": "Memory areas managed during runtime, including Method Area, Heap, and Stack.",
            "sub-areas": [
              "Method Area",
              "Heap",
              "Stack",
              "PC Register",
              "Native Method Stack"
            ]
          },
          {
            "name": "Execution Engine",
            "function": "Executes bytecode using an interpreter and/or a JIT compiler.",
            "components": [
              "Interpreter",
              "JIT Compiler",
              "Garbage Collector"
            ]
          }
        ]
      },
      {
        "id": "java-memory-management",
        "title": "Java Memory Management",
        "description": "Memory handling in Java, focusing on the Heap and Stack areas managed by the JVM.",
        "memory-areas": [
          {
            "name": "Heap",
            "description": "Used for dynamic memory allocation of objects; managed by the Garbage Collector.",
            "characteristics": [
              "Shared across threads",
              "Garbage collected",
              "Slower access"
            ]
          },
          {
            "name": "Stack",
            "description": "Stores method call frames and local variables; has a LIFO structure.",
            "characteristics": [
              "Thread-specific",
              "Faster access",
              "Fixed size"
            ]
          }
        ]
      },
      {
        "id": "java-platform-components",
        "title": "Java Platform Components",
        "description": "The components of the JDK, JRE, and JVM and their roles.",
        "components": [
          {
            "name": "JDK",
            "definition": "Java Development Kit - includes the JRE and development tools such as the compiler and debugger.",
            "tools": [
              "javac",
              "java",
              "javadoc"
            ]
          },
          {
            "name": "JRE",
            "definition": "Java Runtime Environment - provides libraries and the JVM for running Java applications.",
            "includes": [
              "Class libraries",
              "Runtime environment"
            ]
          },
          {
            "name": "JVM",
            "definition": "Java Virtual Machine - a virtual engine that executes Java bytecode. It integrates an interpreter as well as a Just-In-Time (JIT) compiler, which compiles bytecode into native machine code at runtime to optimize performance.",
            "features": [
              "Platform-independent execution",
              "Garbage Collection",
              "Memory management",
              "Just-In-Time (JIT) compilation"
            ]
          }
        ]
      }
    ]
  }
}
