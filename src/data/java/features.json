{
  "title": "Java 8+ Features",
  "topics": [
    {
      "id": "streams",
      "title": "Stream API",
      "description": "The Stream API introduces a functional and declarative approach to processing collections of objects. It makes it easy to perform complex data manipulations such as filtering, mapping, and reducing with concise and readable code, while also supporting parallel execution.",
      "operations": [
        {
          "name": "Stream Creation",
          "methods": [
            {
              "name": "stream()",
              "description": "Creates a sequential stream from a collection, enabling aggregate operations on its elements.",
              "example": "collection.stream()"
            },
            {
              "name": "of()",
              "description": "Creates a stream from specified values, which is useful for quickly constructing a stream from known elements.",
              "example": "Stream.of(1, 2, 3, 4, 5)"
            },
            {
              "name": "generate()",
              "description": "Creates an infinite stream using a Supplier, often used for generating random values or repeated patterns.",
              "example": "Stream.generate(Math::random)"
            },
            {
              "name": "iterate()",
              "description": "Creates an infinite stream by iteratively applying a function starting from an initial seed, useful for sequences.",
              "example": "Stream.iterate(0, n -> n + 2)"
            },
            {
              "name": "Arrays.stream()",
              "description": "Converts an array into a stream, enabling stream operations on the array's elements.",
              "example": "Arrays.stream(new int[]{1, 2, 3})"
            }
          ]
        },
        {
          "name": "Intermediate Operations",
          "methods": [
            {
              "name": "filter()",
              "description": "Retains only the elements that satisfy a given predicate.",
              "example": "list.stream().filter(n -> n > 10)"
            },
            {
              "name": "map()",
              "description": "Transforms each element in the stream using the provided function.",
              "example": "list.stream().map(String::toUpperCase)"
            },
            {
              "name": "flatMap()",
              "description": "Converts each element into a stream and then flattens the resulting streams into one contiguous stream.",
              "example": "list.stream().flatMap(List::stream)"
            },
            {
              "name": "sorted()",
              "description": "Sorts the elements of the stream in natural order or according to a custom comparator.",
              "example": "stream.sorted()"
            },
            {
              "name": "distinct()",
              "description": "Eliminates duplicate elements from the stream.",
              "example": "stream.distinct()"
            },
            {
              "name": "limit()",
              "description": "Restricts the stream to contain no more than the specified number of elements.",
              "example": "stream.limit(5)"
            },
            {
              "name": "skip()",
              "description": "Skips the first n elements of the stream, returning a stream that begins after these elements.",
              "example": "stream.skip(3)"
            },
            {
              "name": "peek()",
              "description": "Performs the provided action on each element as it is consumed, often used for debugging.",
              "example": "stream.peek(System.out::println)"
            }
          ]
        },
        {
          "name": "Terminal Operations",
          "methods": [
            {
              "name": "collect()",
              "description": "Accumulates the stream elements into a collection or a summarized result using a Collector.",
              "example": "stream.collect(Collectors.toList())"
            },
            {
              "name": "reduce()",
              "description": "Reduces the stream elements to a single value using an accumulator function.",
              "example": "stream.reduce(0, Integer::sum)"
            },
            {
              "name": "forEach()",
              "description": "Performs an action on each element of the stream.",
              "example": "stream.forEach(System.out::println)"
            },
            {
              "name": "forEachOrdered()",
              "description": "Performs an action on each element in the stream while preserving the encounter order.",
              "example": "stream.forEachOrdered(System.out::println)"
            },
            {
              "name": "toArray()",
              "description": "Converts the stream into an array containing all its elements.",
              "example": "Object[] array = stream.toArray()"
            },
            {
              "name": "count()",
              "description": "Returns the total number of elements in the stream.",
              "example": "long count = stream.count()"
            },
            {
              "name": "anyMatch()",
              "description": "Returns true if any element in the stream satisfies the given predicate.",
              "example": "stream.anyMatch(n -> n > 10)"
            },
            {
              "name": "allMatch()",
              "description": "Returns true if every element in the stream satisfies the given predicate.",
              "example": "stream.allMatch(n -> n > 0)"
            },
            {
              "name": "noneMatch()",
              "description": "Returns true if no elements in the stream satisfy the given predicate.",
              "example": "stream.noneMatch(n -> n < 0)"
            },
            {
              "name": "findFirst()",
              "description": "Retrieves the first element of the stream, if present, wrapped in an Optional.",
              "example": "Optional<T> first = stream.findFirst()"
            },
            {
              "name": "findAny()",
              "description": "Retrieves any element of the stream, particularly useful in parallel streams, wrapped in an Optional.",
              "example": "Optional<T> any = stream.findAny()"
            },
            {
              "name": "max()",
              "description": "Finds the maximum element in the stream according to a provided comparator.",
              "example": "stream.max(Comparator.naturalOrder())"
            },
            {
              "name": "min()",
              "description": "Finds the minimum element in the stream according to a provided comparator.",
              "example": "stream.min(Comparator.naturalOrder())"
            },
            {
              "name": "summaryStatistics()",
              "description": "Generates summary statistics (count, sum, min, average, max) for numerical streams.",
              "example": "IntSummaryStatistics stats = intStream.summaryStatistics()"
            }
          ]
        },
        {
          "name": "Parallel Streams",
          "methods": [
            {
              "name": "parallel()",
              "description": "Converts a sequential stream into a parallel stream to leverage multi-core processing for improved performance.",
              "example": "stream.parallel().forEach(System.out::println)"
            },
            {
              "name": "sequential()",
              "description": "Converts a parallel stream back into a sequential stream to preserve the order of elements.",
              "example": "stream.parallel().sequential()"
            },
            {
              "name": "parallelStream()",
              "description": "Creates a parallel stream directly from a collection, enabling concurrent processing.",
              "example": "collection.parallelStream()"
            }
          ]
        },
        {
          "name": "Specialized Streams",
          "methods": [
            {
              "name": "IntStream",
              "description": "A specialized stream for primitive int values, designed to avoid the overhead of boxing.",
              "example": "IntStream.range(1, 10).sum()"
            },
            {
              "name": "LongStream",
              "description": "A specialized stream for primitive long values, offering efficient numerical operations.",
              "example": "LongStream.of(1L, 2L, 3L)"
            },
            {
              "name": "DoubleStream",
              "description": "A specialized stream for primitive double values, optimized for floating-point arithmetic.",
              "example": "DoubleStream.generate(Math::random).limit(5)"
            },
            {
              "name": "Stream Support Methods",
              "description": "Methods to convert between object streams and primitive streams, facilitating operations like mapping.",
              "example": "stream.mapToInt(String::length)"
            }
          ]
        },
        {
          "name": "Collectors",
          "methods": [
            {
              "name": "toList()",
              "description": "Collects stream elements into a List.",
              "example": "stream.collect(Collectors.toList())"
            },
            {
              "name": "toSet()",
              "description": "Collects stream elements into a Set, automatically removing duplicates.",
              "example": "stream.collect(Collectors.toSet())"
            },
            {
              "name": "toCollection()",
              "description": "Collects elements into a specific type of collection provided by a Supplier.",
              "example": "stream.collect(Collectors.toCollection(LinkedList::new))"
            },
            {
              "name": "toMap()",
              "description": "Transforms the stream into a Map by applying key and value mapping functions.",
              "example": "stream.collect(Collectors.toMap(keyMapper, valueMapper))"
            },
            {
              "name": "toConcurrentMap()",
              "description": "Transforms the stream into a thread-safe ConcurrentMap using key and value mapping functions.",
              "example": "stream.collect(Collectors.toConcurrentMap(keyMapper, valueMapper))"
            },
            {
              "name": "joining()",
              "description": "Concatenates the stream elements into a single String with an optional delimiter.",
              "example": "stream.collect(Collectors.joining(\", \"))"
            },
            {
              "name": "counting()",
              "description": "Counts the number of elements in the stream.",
              "example": "stream.collect(Collectors.counting())"
            },
            {
              "name": "summingInt()",
              "description": "Calculates the sum of integer values in the stream.",
              "example": "stream.collect(Collectors.summingInt(Integer::intValue))"
            },
            {
              "name": "summingLong()",
              "description": "Calculates the sum of long values in the stream.",
              "example": "stream.collect(Collectors.summingLong(Long::longValue))"
            },
            {
              "name": "summingDouble()",
              "description": "Calculates the sum of double values in the stream.",
              "example": "stream.collect(Collectors.summingDouble(Double::doubleValue))"
            },
            {
              "name": "averagingInt()",
              "description": "Calculates the average of integer values in the stream.",
              "example": "stream.collect(Collectors.averagingInt(Integer::intValue))"
            },
            {
              "name": "averagingLong()",
              "description": "Calculates the average of long values in the stream.",
              "example": "stream.collect(Collectors.averagingLong(Long::longValue))"
            },
            {
              "name": "averagingDouble()",
              "description": "Calculates the average of double values in the stream.",
              "example": "stream.collect(Collectors.averagingDouble(Double::doubleValue))"
            },
            {
              "name": "summarizingInt()",
              "description": "Produces summary statistics for integer values in the stream.",
              "example": "stream.collect(Collectors.summarizingInt(Integer::intValue))"
            },
            {
              "name": "summarizingLong()",
              "description": "Produces summary statistics for long values in the stream.",
              "example": "stream.collect(Collectors.summarizingLong(Long::longValue))"
            },
            {
              "name": "summarizingDouble()",
              "description": "Produces summary statistics for double values in the stream.",
              "example": "stream.collect(Collectors.summarizingDouble(Double::doubleValue))"
            },
            {
              "name": "maxBy()",
              "description": "Finds the maximum element in the stream using a provided comparator.",
              "example": "stream.collect(Collectors.maxBy(Comparator.naturalOrder()))"
            },
            {
              "name": "minBy()",
              "description": "Finds the minimum element in the stream using a provided comparator.",
              "example": "stream.collect(Collectors.minBy(Comparator.naturalOrder()))"
            },
            {
              "name": "reducing()",
              "description": "Reduces the stream elements to a single value using an associative binary operator.",
              "example": "stream.collect(Collectors.reducing(0, Integer::intValue, Integer::sum))"
            },
            {
              "name": "collectingAndThen()",
              "description": "Performs a finishing transformation on the result produced by a Collector.",
              "example": "stream.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList))"
            },
            {
              "name": "groupingBy()",
              "description": "Groups stream elements according to a classifier function into a Map.",
              "example": "stream.collect(Collectors.groupingBy(String::length))"
            },
            {
              "name": "groupingByConcurrent()",
              "description": "A concurrent version of groupingBy that returns a thread-safe ConcurrentMap.",
              "example": "stream.collect(Collectors.groupingByConcurrent(String::length))"
            },
            {
              "name": "partitioningBy()",
              "description": "Partitions stream elements into two groups based on a predicate, returning a Map with Boolean keys.",
              "example": "stream.collect(Collectors.partitioningBy(n -> n > 10))"
            },
            {
              "name": "mapping()",
              "description": "Applies a mapping function to the elements before collecting them into a collection.",
              "example": "stream.collect(Collectors.mapping(String::toUpperCase, Collectors.toList()))"
            }
          ]
        },
        {
          "name": "Examples",
          "methods": [
            {
              "name": "Processing a List of Names",
              "description": "Filters a list of names to include only those starting with 'A', converts them to uppercase, and collects the results into a new list.",
              "example": "names.stream().filter(n -> n.startsWith(\"A\")).map(String::toUpperCase).collect(Collectors.toList())"
            },
            {
              "name": "Calculating Total Order Amount",
              "description": "Sums the total amounts from a list of orders, providing a single aggregated value.",
              "example": "orders.stream().mapToDouble(Order::getAmount).sum()"
            },
            {
              "name": "Grouping Employees by Department",
              "description": "Organizes employees into groups based on their department using the groupingBy collector.",
              "example": "employees.stream().collect(Collectors.groupingBy(Employee::getDepartment))"
            },
            {
              "name": "Parallel Stream Processing",
              "description": "Processes a large data set in parallel to improve performance by leveraging multiple cores.",
              "example": "largeDataSet.parallelStream().filter(...).collect(...)"
            }
          ]
        }
      ]
    },
    {
      "id": "completableFuture",
      "title": "CompletableFuture",
      "description": "CompletableFuture is an enhanced Future that supports asynchronous programming, providing a more flexible and functional approach to handling concurrent operations.",
      "features": [
        {
          "category": "Creation",
          "methods": [
            {
              "name": "supplyAsync()",
              "description": "Creates a CompletableFuture that asynchronously supplies a result using a Supplier.",
              "example": "CompletableFuture.supplyAsync(() -> fetchData())"
            },
            {
              "name": "runAsync()",
              "description": "Creates a CompletableFuture that runs a Runnable task asynchronously without returning a result.",
              "example": "CompletableFuture.runAsync(() -> process())"
            }
          ]
        },
        {
          "category": "Transformation",
          "methods": [
            {
              "name": "thenApply()",
              "description": "Transforms the result of a CompletableFuture using a function, returning a new CompletableFuture with the transformed result.",
              "example": "future.thenApply(result -> result.toUpperCase())"
            },
            {
              "name": "thenCompose()",
              "description": "Chains multiple asynchronous operations by using the result of one future to start another.",
              "example": "future.thenCompose(result -> fetchMore(result))"
            },
            {
              "name": "thenCombine()",
              "description": "Combines the results of two independent CompletableFutures using a specified function.",
              "example": "future1.thenCombine(future2, (r1, r2) -> r1 + r2)"
            }
          ]
        },
        {
          "category": "Error Handling",
          "methods": [
            {
              "name": "exceptionally()",
              "description": "Handles exceptions by providing an alternative result if an error occurs during the asynchronous operation.",
              "example": "future.exceptionally(ex -> handleError(ex))"
            },
            {
              "name": "handle()",
              "description": "Processes both successful results and exceptions, allowing you to return a value based on either outcome.",
              "example": "future.handle((result, ex) -> ex != null ? handleError(ex) : result)"
            }
          ]
        }
      ]
    },
    {
      "id": "dateTime",
      "title": "Date/Time API",
      "description": "Modern and comprehensive classes for handling dates and times in Java. These classes offer improved clarity, flexibility, and precision compared to the older date/time APIs.",
      "classes": [
        {
          "name": "LocalDate",
          "description": "Represents a date without time or timezone information, ideal for representing calendar dates.",
          "examples": [
            {
              "operation": "Creation",
              "code": "LocalDate.now()"
            },
            {
              "operation": "Parsing",
              "code": "LocalDate.parse(\"2024-01-01\")"
            },
            {
              "operation": "Manipulation",
              "code": "date.plusDays(1).minusMonths(1)"
            }
          ]
        },
        {
          "name": "LocalTime",
          "description": "Represents a time without date or timezone information, useful for specifying times of day.",
          "examples": [
            {
              "operation": "Creation",
              "code": "LocalTime.of(13, 30)"
            },
            {
              "operation": "Parsing",
              "code": "LocalTime.parse(\"13:30:00\")"
            }
          ]
        },
        {
          "name": "LocalDateTime",
          "description": "Combines date and time without timezone information, providing a complete date-time representation.",
          "examples": [
            {
              "operation": "Creation",
              "code": "LocalDateTime.now()"
            },
            {
              "operation": "Formatting",
              "code": "dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)"
            }
          ]
        },
        {
          "name": "ZonedDateTime",
          "description": "Represents date and time with timezone information, allowing conversions between different time zones.",
          "examples": [
            {
              "operation": "Creation",
              "code": "ZonedDateTime.now(ZoneId.of(\"Europe/Paris\"))"
            },
            {
              "operation": "Conversion",
              "code": "zonedDateTime.withZoneSameInstant(ZoneId.of(\"America/New_York\"))"
            }
          ]
        }
      ]
    },
    {
      "id": "methodReferences",
      "title": "Method References",
      "description": "Method references offer a concise way to refer to existing methods or constructors, improving code readability and reducing boilerplate in lambda expressions.",
      "types": [
        {
          "type": "Static Method Reference",
          "syntax": "ClassName::staticMethod",
          "example": "String::valueOf",
          "description": "A concise reference to a static method."
        },
        {
          "type": "Instance Method Reference",
          "syntax": "ClassName::instanceMethod",
          "example": "String::toLowerCase",
          "description": "A reference to an instance method for a given object or class."
        },
        {
          "type": "Constructor Reference",
          "syntax": "ClassName::new",
          "example": "ArrayList::new",
          "description": "A shorthand for calling a constructor to create new objects."
        }
      ],
      "examples": [
        {
          "scenario": "With Streams",
          "code": "list.stream().forEach(System.out::println)",
          "description": "Prints each element in the stream using a method reference."
        },
        {
          "scenario": "With Comparator",
          "code": "list.sort(String::compareToIgnoreCase)",
          "description": "Sorts a list of strings in a case-insensitive manner using a method reference."
        }
      ]
    },
    {
      "id": "defaultMethods",
      "title": "Default Methods",
      "description": "Default methods allow interfaces to provide concrete implementations, enabling the extension of interfaces with new behavior without breaking existing implementations.",
      "features": [
        {
          "aspect": "Purpose",
          "description": "Extend interfaces with new methods without breaking backward compatibility."
        },
        {
          "aspect": "Rules",
          "points": [
            "Must be declared with the 'default' keyword",
            "Can be overridden by implementing classes",
            "Can call other interface methods",
            "Cannot override methods from the Object class"
          ]
        }
      ],
      "examples": [
        {
          "title": "Simple Default Method",
          "code": "interface Vehicle { default void start() { System.out.println(\"Starting vehicle\"); } }",
          "description": "Provides a standard default implementation for an interface method."
        },
        {
          "title": "Multiple Default Methods",
          "code": "interface Collection { default Stream<E> stream() { ... } default Stream<E> parallelStream() { ... } }",
          "description": "Shows how an interface can include several default methods."
        }
      ]
    },
    {
      "id": "lambdaExpressions",
      "title": "Lambda Expressions",
      "description": "Lambda expressions enable the creation of anonymous functions in a concise and readable format, reducing boilerplate code and enhancing functional programming.",
      "syntax": "parameters -> expression",
      "examples": [
        {
          "scenario": "Simple Expression",
          "code": "(int x, int y) -> x + y",
          "description": "Adds two numbers together."
        },
        {
          "scenario": "Single Parameter",
          "code": "n -> n * n",
          "description": "Squares a number."
        },
        {
          "scenario": "Block of Code",
          "code": "(String s) -> { System.out.println(s); }",
          "description": "Prints a string using a code block."
        }
      ]
    },
    {
      "id": "functionalInterfaces",
      "title": "Functional Interfaces",
      "description": "Functional interfaces are interfaces with a single abstract method, forming the foundation for lambda expressions and functional programming in Java.",
      "examples": [
        {
          "name": "Predicate<T>",
          "description": "Represents a function that takes a value and returns a boolean result.",
          "method": "boolean test(T t)"
        },
        {
          "name": "Consumer<T>",
          "description": "Represents an operation that accepts a single input and performs an action without returning a result.",
          "method": "void accept(T t)"
        },
        {
          "name": "Function<T,R>",
          "description": "Represents a function that takes an argument and produces a result.",
          "method": "R apply(T t)"
        }
      ],
      "note": "Use the @FunctionalInterface annotation to clearly indicate functional interfaces."
    },
    {
      "id": "optional",
      "title": "Optional Class",
      "description": "Optional is a container object that may or may not contain a non-null value, helping to avoid null pointer exceptions and express the absence of a value explicitly.",
      "methods": [
        {
          "name": "of()",
          "description": "Creates an Optional containing a non-null value.",
          "example": "Optional.of(value)"
        },
        {
          "name": "empty()",
          "description": "Creates an empty Optional instance.",
          "example": "Optional.empty()"
        },
        {
          "name": "ofNullable()",
          "description": "Creates an Optional that holds the given value, or is empty if the value is null.",
          "example": "Optional.ofNullable(value)"
        },
        {
          "name": "get()",
          "description": "Retrieves the value if present; throws NoSuchElementException if the Optional is empty.",
          "example": "optional.get()"
        },
        {
          "name": "isPresent()",
          "description": "Checks whether the Optional contains a value.",
          "example": "optional.isPresent()"
        },
        {
          "name": "ifPresent()",
          "description": "Executes the given action if a value is present in the Optional.",
          "example": "optional.ifPresent(value -> System.out.println(value))"
        }
      ]
    },
    {
      "id": "annotations",
      "title": "Annotations Enhancements",
      "description": "Recent improvements in annotations allow for more expressive metadata. These enhancements include type annotations and repeating annotations, which help reduce boilerplate and improve clarity.",
      "features": [
        {
          "name": "Type Annotations",
          "description": "Annotations that can be applied wherever a type is used, providing additional metadata.",
          "example": "@Nonnull String text"
        },
        {
          "name": "Repeating Annotations",
          "description": "Allows the same annotation to be applied multiple times to a single declaration.",
          "example": "@Schedule(dayOfMonth=\"last\") @Schedule(dayOfWeek=\"Fri\") void doPeriodic() {}"
        }
      ]
    },
    {
      "id": "nashorn",
      "title": "Nashorn JavaScript Engine",
      "description": "Nashorn is a lightweight JavaScript engine integrated into Java, enabling dynamic scripting by allowing JavaScript code to be embedded and executed within Java applications.",
      "features": [
        {
          "aspect": "Integration",
          "description": "Allows JavaScript code to be directly embedded into Java applications, facilitating dynamic scripting and seamless integration with Java libraries.",
          "example": "ScriptEngine engine = new ScriptEngineManager().getEngineByName(\"nashorn\");"
        },
        {
          "aspect": "Performance",
          "description": "Offers improved performance compared to previous JavaScript engines, making it more efficient for executing JavaScript code."
        }
      ]
    },
    {
      "id": "base64",
      "title": "Base64 Encoding and Decoding",
      "description": "Provides built-in support for encoding binary data into Base64 strings and decoding Base64 strings back into binary data, simplifying data conversions.",
      "methods": [
        {
          "name": "getEncoder()",
          "description": "Returns a Base64 encoder that converts binary data into a Base64 encoded string.",
          "example": "Base64.getEncoder().encodeToString(bytes)"
        },
        {
          "name": "getDecoder()",
          "description": "Returns a Base64 decoder that converts a Base64 encoded string back into binary data.",
          "example": "Base64.getDecoder().decode(string)"
        }
      ]
    },
    {
      "id": "concurrency",
      "title": "Concurrency Utilities",
      "description": "New concurrency APIs and enhancements in Java provide robust support for multi-threaded programming, making concurrent code safer and more efficient.",
      "classes": [
        {
          "name": "StampedLock",
          "description": "A lock with a stamped mechanism that supports both optimistic and pessimistic locking modes, allowing fine-grained control over read/write access.",
          "example": "StampedLock lock = new StampedLock();"
        },
        {
          "name": "LongAdder",
          "description": "A high-performance alternative to AtomicLong, designed for high contention scenarios to reduce contention overhead.",
          "example": "LongAdder adder = new LongAdder();"
        },
        {
          "name": "ConcurrentHashMap Enhancements",
          "description": "Enhanced methods for performing bulk operations and mapping functions concurrently, boosting performance in multi-threaded environments.",
          "example": "map.forEach((key, value) -> { /* process */ });"
        }
      ]
    }
  ]
}
