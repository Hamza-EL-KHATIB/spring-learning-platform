{
  "id": "java-collections-framework",
  "title": "Java Collections Framework",
  "tags": ["java", "collections", "backend", "data-structures", "interview"],
  "topics": [
    {
      "id": "overview",
      "title": "Overview",
      "description": "The Java Collections Framework provides a unified, well-designed architecture for representing and manipulating groups of objects. It offers a comprehensive set of interfaces, implementations, and algorithms to dramatically improve programming quality and efficiency when working with groups of objects.",
      "features": [
        {"name": "Architecture", "description": "Unified hierarchy for collections", "interviewRelevance": 5},
        {"name": "Performance", "description": "Different implementations for different needs", "interviewRelevance": 5},
        {"name": "Thread Safety", "description": "Options for concurrent access", "interviewRelevance": 4},
        {"name": "Utility Methods", "description": "Sort, search, synchronize operations", "interviewRelevance": 4},
        {"name": "Iteration", "description": "Standard patterns across collections", "interviewRelevance": 3},
        {"name": "Java 8+ Integration", "description": "Stream and functional operations", "interviewRelevance": 4}
      ]
    },
    {
      "id": "hierarchy",
      "title": "Hierarchy and Core Interfaces",
      "description": "Core interfaces and implementation hierarchy",
      "structure": "Collection\n├── List (ordered, allows duplicates)\n│   ├── ArrayList\n│   ├── LinkedList\n│   └── Vector/Stack (legacy)\n├── Set (no duplicates)\n│   ├── HashSet\n│   ├── LinkedHashSet\n│   └── TreeSet (sorted)\n└── Queue (FIFO principle)\n    ├── PriorityQueue\n    └── Deque (double-ended)\n        └── ArrayDeque\n\nMap (key-value pairs)\n├── HashMap\n├── LinkedHashMap\n├── TreeMap (sorted keys)\n├── Hashtable (legacy)\n└── ConcurrentHashMap",
      "interfaces": [
        {
          "name": "Collection Interface",
          "description": "The root interface in the collection hierarchy.",
          "code": "public interface Collection<E> extends Iterable<E> {\n    boolean add(E element);\n    boolean remove(Object element);\n    boolean contains(Object element);\n    int size();\n    boolean isEmpty();\n    Iterator<E> iterator();\n    // Other methods...\n}"
        },
        {
          "name": "List Interface",
          "description": "An ordered collection that allows duplicate elements.",
          "code": "public interface List<E> extends Collection<E> {\n    E get(int index);\n    E set(int index, E element);\n    void add(int index, E element);\n    E remove(int index);\n    // Other methods...\n}"
        },
        {
          "name": "Set Interface",
          "description": "A collection that cannot contain duplicate elements.",
          "code": "public interface Set<E> extends Collection<E> {\n    // Inherits methods from Collection\n    // No duplicate elements allowed\n}"
        },
        {
          "name": "Map Interface",
          "description": "Maps keys to values. Cannot contain duplicate keys.",
          "code": "public interface Map<K, V> {\n    V put(K key, V value);\n    V get(Object key);\n    V remove(Object key);\n    boolean containsKey(Object key);\n    Set<K> keySet();\n    Collection<V> values();\n    Set<Map.Entry<K, V>> entrySet();\n    // Other methods...\n}"
        },
        {
          "name": "Queue Interface",
          "description": "A collection designed for holding elements prior to processing.",
          "code": "public interface Queue<E> extends Collection<E> {\n    boolean offer(E e);  // Adds an element\n    E poll();            // Retrieves and removes the head\n    E peek();            // Retrieves but doesn't remove the head\n    // Other methods...\n}"
        }
      ]
    },
    {
      "id": "collection-types",
      "title": "Collection Types",
      "description": "The Java Collections Framework provides a set of classes and interfaces to work with groups of objects in different ways.",
      "types": [
        {
          "type": "List",
          "description": "An ordered collection that allows duplicate elements.",
          "implementations": [
            {
              "name": "ArrayList",
              "description": "A resizable array implementation of the List interface. Fast random access but slow insertions/deletions in the middle.",
              "code": "List<String> names = new ArrayList<>();\nnames.add(\"John\");\nnames.add(\"Jane\");\nString firstPerson = names.get(0);  // Fast random access",
              "characteristics": [
                "Dynamic array implementation",
                "Fast random access",
                "Slow insertions/deletions in the middle",
                "Not thread-safe"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": [
                  "Access: O(1)",
                  "Add/Remove at end: Amortized O(1)",
                  "Add/Remove in middle: O(n)"
                ]},
                {"category": "Memory Overhead", "points": ["Low to moderate"]},
                {"category": "Default Initial Capacity", "points": ["10 elements"]},
                {"category": "Growth Strategy", "points": ["Increases by 50% when full"]},
                {"category": "Synchronized", "points": ["No (use Collections.synchronizedList() if needed)"]}
              ]
            },
            {
              "name": "LinkedList",
              "description": "A doubly-linked list implementation. Fast insertions/deletions but slow random access.",
              "code": "List<String> names = new LinkedList<>();\nnames.add(\"John\");\nnames.add(\"Jane\");\nnames.add(0, \"Bob\");  // Fast insertion at specific position",
              "characteristics": [
                "Doubly-linked list implementation",
                "Fast insertions/deletions",
                "Slow random access",
                "More memory overhead"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": [
                  "Access: O(n)",
                  "Add/Remove at beginning/end: O(1)",
                  "Add/Remove in middle: O(n) to find position, then O(1)"
                ]},
                {"category": "Memory Overhead", "points": ["Higher (stores previous and next pointers)"]},
                {"category": "Special Feature", "points": ["Implements both List and Deque interfaces"]},
                {"category": "Synchronized", "points": ["No"]}
              ]
            },
            {
              "name": "Vector",
              "description": "Similar to ArrayList but synchronized. Generally considered legacy code.",
              "code": "Vector<String> names = new Vector<>();\nnames.add(\"John\");\n// Thread-safe but with performance cost",
              "characteristics": [
                "Similar to ArrayList but synchronized",
                "Thread-safe with performance cost",
                "Generally considered legacy code"
              ],
              "keyPoints": [
                {"category": "Thread Safety", "points": ["Synchronized (all methods are thread-safe)"]},
                {"category": "Performance", "points": ["Lower than ArrayList due to synchronization overhead"]},
                {"category": "Legacy Status", "points": ["Generally replaced by ArrayList with explicit synchronization when needed"]}
              ]
            }
          ]
        },
        {
          "type": "Set",
          "description": "A collection that does not allow duplicate elements.",
          "implementations": [
            {
              "name": "HashSet",
              "description": "Fast operations but no guaranteed iteration order.",
              "code": "Set<String> uniqueNames = new HashSet<>();\nuniqueNames.add(\"John\");\nuniqueNames.add(\"John\");  // Ignored (duplicate)\nSystem.out.println(uniqueNames.size());  // Outputs 1",
              "characteristics": [
                "Backed by a HashMap",
                "No duplicates allowed",
                "No guaranteed order",
                "O(1) operations for add, remove, and contains"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": ["O(1) for add, remove, contains"]},
                {"category": "Ordering", "points": ["No guaranteed order"]},
                {"category": "Nulls", "points": ["Permits one null element"]},
                {"category": "Implementation", "points": ["Backed by HashMap"]}
              ]
            },
            {
              "name": "TreeSet",
              "description": "Maintains elements in sorted order.",
              "code": "Set<String> sortedNames = new TreeSet<>();\nsortedNames.add(\"John\");\nsortedNames.add(\"Alice\");\nsortedNames.add(\"Bob\");\n// Iteration will be in order: Alice, Bob, John",
              "characteristics": [
                "Implements NavigableSet",
                "Stores elements in a sorted order",
                "O(log n) time for operations",
                "No duplicates allowed"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": ["O(log n) for add, remove, contains"]},
                {"category": "Ordering", "points": ["Elements are stored in sorted order"]},
                {"category": "Implementation", "points": ["Backed by TreeMap (Red-Black Tree)"]},
                {"category": "Requirements", "points": ["Elements must be comparable or a comparator must be provided"]}
              ]
            },
            {
              "name": "LinkedHashSet",
              "description": "Maintains insertion order while providing fast operations.",
              "code": "Set<String> orderedNames = new LinkedHashSet<>();\norderedNames.add(\"John\");\norderedNames.add(\"Alice\");\n// Iteration will preserve insertion order: John, Alice",
              "characteristics": [
                "Maintains insertion order",
                "O(1) operations for add, remove, and contains",
                "Higher memory usage due to linked list backing"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": ["O(1) for add, remove, contains"]},
                {"category": "Ordering", "points": ["Maintains insertion order"]},
                {"category": "Implementation", "points": ["Hash table and linked list implementation"]},
                {"category": "Memory Usage", "points": ["Slightly higher than HashSet"]}
              ]
            }
          ]
        },
        {
          "type": "Queue",
          "description": "A collection used to hold multiple elements prior to processing, typically in FIFO order.",
          "implementations": [
            {
              "name": "PriorityQueue",
              "description": "A queue that orders elements based on their natural ordering or a provided Comparator.",
              "code": "PriorityQueue<Integer> pq = new PriorityQueue<>();\npq.add(3);\npq.add(1);\npq.add(2);\nInteger first = pq.poll();  // Returns 1 (smallest element)",
              "characteristics": [
                "Orders elements based on priority",
                "Not thread-safe",
                "O(log n) time complexity for insertions"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": [
                  "Insert: O(log n)",
                  "Peak: O(1)",
                  "Poll: O(log n)"
                ]},
                {"category": "Ordering", "points": ["Natural order or specified comparator"]},
                {"category": "Implementation", "points": ["Typically a min-heap"]}
              ]
            },
            {
              "name": "LinkedList as Queue",
              "description": "LinkedList can be used as a Queue implementation.",
              "code": "Queue<String> queue = new LinkedList<>();\nqueue.offer(\"First\");\nqueue.offer(\"Second\");\nString first = queue.poll();  // Returns \"First\"",
              "characteristics": [
                "Can also be used as a Queue implementation",
                "FIFO behavior for queue operations",
                "Doubly-linked structure allows fast additions/removals"
              ],
              "keyPoints": [
                {"category": "Implementation", "points": ["Uses LinkedList's doubly-linked structure"]},
                {"category": "Usage Pattern", "points": ["Used when a simple FIFO queue is needed"]}
              ]
            },
            {
              "name": "ArrayDeque",
              "description": "A resizable array implementation of the Deque interface.",
              "code": "Deque<String> deque = new ArrayDeque<>();\ndeque.addFirst(\"First\");\ndeque.addLast(\"Last\");\nString first = deque.removeFirst();  // Returns \"First\"",
              "characteristics": [
                "Faster than LinkedList for most operations",
                "Implements Deque interface",
                "No capacity restrictions"
              ],
              "keyPoints": [
                {"category": "Performance", "points": ["More efficient than Stack when used as a stack", "More efficient than LinkedList when used as a queue"]},
                {"category": "Null Elements", "points": ["Does not permit null elements"]},
                {"category": "Implementation", "points": ["Circular array"]}
              ]
            }
          ]
        },
        {
          "type": "Map",
          "description": "An object that maps keys to values, with no duplicate keys allowed.",
          "implementations": [
            {
              "name": "HashMap",
              "description": "Implements Map with fast operations but no guaranteed iteration order.",
              "code": "Map<String, Integer> ages = new HashMap<>();\nages.put(\"John\", 25);\nages.put(\"Jane\", 30);\nInteger johnsAge = ages.get(\"John\");  // Fast lookup",
              "characteristics": [
                "No guaranteed order",
                "Allows null keys and values",
                "Not thread-safe",
                "O(1) time complexity for basic operations"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": ["O(1) for put, get, remove"]},
                {"category": "Ordering", "points": ["No guaranteed order"]},
                {"category": "Nulls", "points": ["Allows one null key and multiple null values"]},
                {"category": "Load Factor", "points": ["Default 0.75 (resize at 75% capacity)"]},
                {"category": "Initial Capacity", "points": ["Default 16 buckets"]},
                {"category": "Internal Structure", "points": ["Array of linked lists, converted to balanced trees when buckets get large (Java 8+)"]}
              ]
            },
            {
              "name": "TreeMap",
              "description": "Implements SortedMap; maintains keys in sorted order.",
              "code": "Map<String, Integer> sortedAges = new TreeMap<>();\nsortedAges.put(\"John\", 25);\nsortedAges.put(\"Alice\", 22);\n// Keys will be in sorted order: Alice, John",
              "characteristics": [
                "Stores keys in sorted order",
                "O(log n) time complexity for operations",
                "No null keys allowed"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": ["O(log n) for put, get, remove"]},
                {"category": "Ordering", "points": ["Sorted according to natural ordering or comparator"]},
                {"category": "Implementation", "points": ["Red-Black Tree"]},
                {"category": "Requirements", "points": ["Keys must be comparable or a comparator must be provided"]}
              ]
            },
            {
              "name": "LinkedHashMap",
              "description": "Maintains insertion order or access order.",
              "code": "// Insertion-order\nMap<String, Integer> orderedAges = new LinkedHashMap<>();\norderedAges.put(\"John\", 25);\norderedAges.put(\"Jane\", 30);\n// Will iterate in insertion order: John, Jane\n\n// Access-order (LRU cache-like behavior)\nMap<String, Integer> lruCache = new LinkedHashMap<>(16, 0.75f, true);",
              "characteristics": [
                "Maintains insertion order",
                "Higher memory usage due to linked list backing",
                "O(1) time complexity for operations"
              ],
              "keyPoints": [
                {"category": "Time Complexity", "points": ["O(1) for put, get, remove"]},
                {"category": "Ordering", "points": ["Maintains insertion order by default, can be configured for access order"]},
                {"category": "Implementation", "points": ["Hash table and doubly-linked list"]},
                {"category": "LRU Cache", "points": ["Can be configured to maintain access order (recently accessed entries at the end)"]}
              ]
            },
            {
              "name": "ConcurrentHashMap",
              "description": "Thread-safe implementation optimized for concurrency.",
              "code": "Map<String, Integer> concurrentMap = new ConcurrentHashMap<>();\n// Safe for concurrent access from multiple threads",
              "characteristics": [
                "Thread-safe implementation",
                "Designed for concurrent access",
                "No lock on the entire map"
              ],
              "keyPoints": [
                {"category": "Thread Safety", "points": ["Thread-safe without locking entire map"]},
                {"category": "Concurrency", "points": ["Uses segmentation to allow multiple threads to modify different parts simultaneously"]},
                {"category": "Null Policy", "points": ["Does not allow null keys or values"]},
                {"category": "Performance", "points": ["High concurrency with minimal locking"]}
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "performance-comparison",
      "title": "Performance Comparison",
      "description": "A comparison of performance characteristics for various collection types in terms of time complexity and use cases.",
      "collections": [
        {
          "collection": "ArrayList",
          "accessTime": "O(1)",
          "insertTime": "O(1) amortized, O(n) in middle",
          "deleteTime": "O(n)",
          "containsTime": "O(n)",
          "memoryOverhead": "Low",
          "notes": "Fast random access"
        },
        {
          "collection": "LinkedList",
          "accessTime": "O(n)",
          "insertTime": "O(1) at ends, O(n) in middle",
          "deleteTime": "O(1) with iterator",
          "containsTime": "O(n)",
          "memoryOverhead": "High",
          "notes": "Fast insertion/deletion"
        },
        {
          "collection": "HashSet",
          "accessTime": "N/A",
          "insertTime": "O(1)",
          "deleteTime": "O(1)",
          "containsTime": "O(1)",
          "memoryOverhead": "Medium",
          "notes": "No duplicates"
        },
        {
          "collection": "TreeSet",
          "accessTime": "N/A",
          "insertTime": "O(log n)",
          "deleteTime": "O(log n)",
          "containsTime": "O(log n)",
          "memoryOverhead": "High",
          "notes": "Sorted, no duplicates"
        },
        {
          "collection": "HashMap",
          "accessTime": "O(1)",
          "insertTime": "O(1)",
          "deleteTime": "O(1)",
          "containsTime": "O(1) for keys",
          "memoryOverhead": "Medium",
          "notes": "Fast key-value access"
        },
        {
          "collection": "TreeMap",
          "accessTime": "O(log n)",
          "insertTime": "O(log n)",
          "deleteTime": "O(log n)",
          "containsTime": "O(log n)",
          "memoryOverhead": "High",
          "notes": "Sorted keys"
        }
      ]
    },
    {
      "id": "best-practices",
      "title": "Common Issues and Best Practices",
      "issues": [
        {
          "id": "concurrent-modification",
          "name": "ConcurrentModificationException",
          "description": "Occurs when modifying a collection while iterating over it.",
          "code": {
            "incorrect": "// Incorrect (throws ConcurrentModificationException)\nfor (String item : list) {\n    if (someCondition(item)) {\n        list.remove(item);\n    }\n}",
            "correct": [
              "// Correct using Iterator\nIterator<String> it = list.iterator();\nwhile (it.hasNext()) {\n    String item = it.next();\n    if (someCondition(item)) {\n        it.remove();\n    }\n}",
              "// Alternative using removeIf (Java 8+)\nlist.removeIf(item -> someCondition(item));"
            ]
          }
        },
        {
          "id": "mutable-keys",
          "name": "Mutable Keys in HashMap",
          "description": "Using mutable objects as keys in HashMaps can lead to objects becoming \"lost\" if their hash code changes after insertion.",
          "code": {
            "problematic": "// Problematic code\nMap<MutableObject, String> map = new HashMap<>();\nMutableObject key = new MutableObject(\"initial\");\nmap.put(key, \"value\");\nkey.modify();  // Changes hash code\nSystem.out.println(map.get(key));  // May return null as key hash changed"
          },
          "bestPractice": "Always use immutable objects as keys in hash-based collections."
        },
        {
          "id": "equals-hashcode",
          "name": "equals() and hashCode() Contract",
          "description": "When implementing custom classes to be used in collections, ensure proper implementation of equals() and hashCode() methods.",
          "code": "public class Person {\n    private String name;\n    private int age;\n    \n    // Constructor, getters, setters...\n    \n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Person person = (Person) o;\n        return age == person.age && Objects.equals(name, person.name);\n    }\n    \n    @Override\n    public int hashCode() {\n        return Objects.hash(name, age);\n    }\n}"
        },
        {
          "id": "choosing-collection",
          "name": "Choosing the Right Collection",
          "recommendations": [
            "Need Fast Random Access: Choose ArrayList",
            "Frequent Insertions/Deletions: Choose LinkedList",
            "Need Unique Elements: Choose HashSet or TreeSet",
            "Need Key-Value Pairs: Choose HashMap or TreeMap",
            "Need Sorted Elements: Choose TreeSet or TreeMap",
            "Need Thread Safety: Choose ConcurrentHashMap or synchronized wrappers"
          ]
        }
      ]
    },
    {
      "id": "comparable-comparator",
      "title": "Comparable and Comparator Interfaces",
      "description": "These interfaces are essential for defining custom ordering in collections.",
      "interfaces": [
        {
          "name": "Comparable Interface",
          "description": "The Comparable interface defines the \"natural ordering\" of a class.",
          "code": "public class Person implements Comparable<Person> {\n    private String name;\n    private int age;\n    \n    // Constructor, getters, setters...\n    \n    @Override\n    public int compareTo(Person other) {\n        // Primary sort by name\n        int nameComparison = this.name.compareTo(other.name);\n        if (nameComparison != 0) {\n            return nameComparison;\n        }\n        // Secondary sort by age\n        return Integer.compare(this.age, other.age);\n    }\n}\n\n// Usage\nList<Person> people = new ArrayList<>();\n// Add people...\nCollections.sort(people);  // Uses natural ordering"
        },
        {
          "name": "Comparator Interface",
          "description": "The Comparator interface allows defining custom ordering strategies separate from the class itself.",
          "code": "// Age-based comparator\nComparator<Person> byAge = new Comparator<Person>() {\n    @Override\n    public int compare(Person p1, Person p2) {\n        return Integer.compare(p1.getAge(), p2.getAge());\n    }\n};\n\n// Java 8+ Lambda\nComparator<Person> byAge = (p1, p2) -> Integer.compare(p1.getAge(), p2.getAge());\n\n// Java 8+ Method reference\nComparator<Person> byAge = Comparator.comparing(Person::getAge);\n\n// Usage\nCollections.sort(people, byAge);"
        }
      ],
      "comparison": {
        "headers": ["Aspect", "Comparable", "Comparator"],
        "rows": [
          ["Interface", "implements Comparable<T>", "Separate implements Comparator<T> class"],
          ["Method", "compareTo(T o)", "compare(T o1, T o2)"],
          ["Location", "In the class being compared", "Separate utility class"],
          ["Usage", "Collections.sort(list)", "Collections.sort(list, comparator)"],
          ["Multiple orderings", "No (one \"natural\" order)", "Yes (multiple possible orderings)"],
          ["Control", "Requires modifying the class", "Works with unmodifiable classes"]
        ]
      }
    },
    {
      "id": "collections-utility",
      "title": "Collections Utility Class",
      "description": "The java.util.Collections class provides static methods for operating on collections.",
      "methods": [
        {
          "category": "Sorting",
          "examples": [
            "Collections.sort(list);",
            "Collections.sort(list, comparator);"
          ]
        },
        {
          "category": "Searching",
          "examples": [
            "int index = Collections.binarySearch(sortedList, key);"
          ]
        },
        {
          "category": "Modifying Collections",
          "examples": [
            "Collections.reverse(list);",
            "Collections.shuffle(list);",
            "Collections.swap(list, i, j);",
            "Collections.fill(list, obj);",
            "Collections.copy(dest, src);"
          ]
        },
        {
          "category": "Finding Extreme Values",
          "examples": [
            "T min = Collections.min(collection);",
            "T max = Collections.max(collection);"
          ]
        },
        {
          "category": "Synchronization",
          "examples": [
            "List<T> syncList = Collections.synchronizedList(list);",
            "Set<T> syncSet = Collections.synchronizedSet(set);",
            "Map<K,V> syncMap = Collections.synchronizedMap(map);"
          ]
        },
        {
          "category": "Unmodifiable Views",
          "examples": [
            "List<T> unmodList = Collections.unmodifiableList(list);",
            "Set<T> unmodSet = Collections.unmodifiableSet(set);",
            "Map<K,V> unmodMap = Collections.unmodifiableMap(map);"
          ]
        },
        {
          "category": "Empty Collections",
          "examples": [
            "List<T> emptyList = Collections.emptyList();",
            "Set<T> emptySet = Collections.emptySet();",
            "Map<K,V> emptyMap = Collections.emptyMap();"
          ]
        }
      ]
    },
    {
      "id": "java8-enhancements",
      "title": "Java 8+ Enhancements",
      "features": [
        {
          "name": "Stream API Integration",
          "description": "Collections can be converted to streams for functional-style operations.",
          "code": "List<String> names = Arrays.asList(\"John\", \"Jane\", \"Adam\", \"Eve\");\n\n// Filter and collect\nList<String> filteredNames = names.stream()\n    .filter(name -> name.startsWith(\"J\"))\n    .collect(Collectors.toList());\n\n// Map and reduce\nint totalLength = names.stream()\n    .mapToInt(String::length)\n    .sum();"
        },
        {
          "name": "ForEach Method",
          "description": "Performs an action for each element.",
          "code": "List<String> names = Arrays.asList(\"John\", \"Jane\", \"Adam\");\nnames.forEach(System.out::println);"
        },
        {
          "name": "Collection Factory Methods (Java 9+)",
          "description": "Concise ways to create immutable collections.",
          "code": "// Immutable List\nList<String> list = List.of(\"a\", \"b\", \"c\");\n\n// Immutable Set\nSet<String> set = Set.of(\"a\", \"b\", \"c\");\n\n// Immutable Map\nMap<String, Integer> map = Map.of(\n    \"a\", 1,\n    \"b\", 2,\n    \"c\", 3\n);"
        }
      ]
    },
    {
      "id": "concurrent-collections",
      "title": "Concurrent Collections",
      "description": "Thread-safe collections designed for high concurrency scenarios.",
      "code": "// Thread-safe map with high concurrency\nConcurrentHashMap<String, Integer> concurrentMap = new ConcurrentHashMap<>();\n\n// Thread-safe list that creates a new copy on each write operation\nCopyOnWriteArrayList<String> cowList = new CopyOnWriteArrayList<>();\n\n// Thread-safe set based on CopyOnWriteArrayList\nCopyOnWriteArraySet<String> cowSet = new CopyOnWriteArraySet<>();\n\n// Thread-safe blocking queue\nBlockingQueue<Task> taskQueue = new LinkedBlockingQueue<>();"
    },
    {
      "id": "interview-questions",
      "title": "Top Interview Questions",
      "questions": [
        {
          "id": "arraylist-vs-linkedlist",
          "question": "What is the difference between ArrayList and LinkedList?",
          "answer": "- **ArrayList** uses a dynamic array - O(1) random access, O(n) insertions/deletions in middle\n- **LinkedList** uses doubly-linked list - O(1) insertions/deletions at known positions, O(n) random access\n- ArrayList is more memory-efficient while LinkedList has overhead for node pointers\n- ArrayList is preferred for frequent access operations, LinkedList for frequent insertions/deletions"
        },
        {
          "id": "arraylist-resize",
          "question": "What happens when an element is added to a full ArrayList?",
          "answer": "When an ArrayList reaches capacity, it creates a new internal array with increased capacity (typically 1.5 times the current capacity), copies all elements to the new array, and then adds the new element. This process is called \"resizing\" and has an amortized time complexity of O(1), although the specific resize operation is O(n)."
        },
        {
          "id": "hashmap-internal",
          "question": "How does a HashMap work internally?",
          "answer": "A HashMap works by:\n\n1. Computing the hashcode of the key\n2. Determining the bucket using the hashcode\n3. Storing the entry in that bucket (as a linked list or balanced tree for collisions)\n4. Using equals() to find the exact entry when retrieving\n5. Resizing and rehashing when the load factor threshold is exceeded"
        },
        {
          "id": "mutable-keys-hashmap",
          "question": "What happens if you use a mutable object as a key in HashMap?",
          "answer": "Using mutable objects as HashMap keys is problematic because:\n\n1. If the object's state changes after insertion, its hashcode may change\n2. When retrieving, the hash lookup will go to a different bucket\n3. The object becomes effectively \"lost\" in the map\n4. This is why immutable objects like String are recommended as map keys"
        },
        {
          "id": "hashmap-vs-concurrenthashmap",
          "question": "What is the difference between HashMap and ConcurrentHashMap?",
          "answer": "- **HashMap** is not thread-safe and will cause issues if accessed concurrently\n- **ConcurrentHashMap** is thread-safe and designed for concurrent access by:\n    - Using segmented locking instead of synchronizing the entire map\n    - Allowing concurrent reads without locking\n    - Providing atomic operations like putIfAbsent and compute\n- ConcurrentHashMap doesn't allow null keys/values unlike HashMap\n- ConcurrentHashMap has better performance under high concurrency"
        },
        {
          "id": "list-set-map-difference",
          "question": "What is the difference between List, Set, and Map?",
          "answer": "- **List**: An ordered collection that allows duplicates (ArrayList, LinkedList)\n- **Set**: A collection that doesn't allow duplicates (HashSet, TreeSet)\n- **Map**: A collection of key-value pairs with unique keys (HashMap, TreeMap)\n\nEach serves different purposes: List for sequential data with position, Set for unique elements, and Map for lookups by key."
        },
        {
          "id": "immutable-collection",
          "question": "How would you create an immutable collection?",
          "answer": "- In Java 8 and earlier: `Collections.unmodifiableList()`, `unmodifiableSet()`, etc.\n- In Java 9+: `List.of()`, `Set.of()`, `Map.of()` or `Map.ofEntries()`\n- Alternative: Guava's ImmutableList, ImmutableSet, etc."
        },
        {
          "id": "list-to-set",
          "question": "How do you convert a List to a Set?",
          "answer": "```java\nList<String> list = new ArrayList<>();\n// Using constructor\nSet<String> set1 = new HashSet<>(list);\n\n// Using stream (Java 8+)\nSet<String> set2 = list.stream().collect(Collectors.toSet());\n```"
        },
        {
          "id": "equals-hashcode-importance",
          "question": "What is the importance of the equals() and hashCode() contract?",
          "answer": "- Both methods must be overridden consistently: if two objects are equal, they must have the same hashcode\n- Required for proper functioning in hash-based collections like HashMap and HashSet\n- If violated, objects may be lost in collections or duplicates may appear in Sets"
        },
        {
          "id": "sort-custom-objects",
          "question": "How would you sort a list of custom objects?",
          "answer": "- Implement Comparable in the class for \"natural ordering\"\n- Create a separate Comparator for custom/multiple orderings\n- Use Collections.sort() or list.sort() with the appropriate comparator\n- In Java 8+, use Comparator.comparing() and method references"
        }
      ]
    }
  ],
  "relatedTopics": ["Java Fundamentals", "Stream API", "Concurrency", "Performance Optimization"],
  "additionalTags": ["collections-framework", "data-structures", "hashmap", "arraylist", "treeset"]
}