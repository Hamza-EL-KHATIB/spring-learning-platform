{
  "title": "Java Concurrency and Multithreading",
  "topics": [
    {
      "id": "thread-lifecycle",
      "title": "Thread Lifecycle",
      "description": "States and transitions in a thread's lifecycle",
      "states": [
        {
          "state": "New",
          "description": "Thread is created but not yet started"
        },
        {
          "state": "Runnable",
          "description": "Thread is ready for execution and is waiting for CPU"
        },
        {
          "state": "Blocked",
          "description": "Thread is waiting for I/O or a monitor lock"
        },
        {
          "state": "Waiting",
          "description": "Thread is waiting indefinitely for another thread"
        },
        {
          "state": "Timed_Waiting",
          "description": "Thread is waiting for a specified time period"
        },
        {
          "state": "Terminated",
          "description": "Thread has completed its execution"
        }
      ]
    },
    {
      "id": "thread-creation",
      "title": "Thread Creation",
      "methods": [
        {
          "method": "Extending Thread",
          "example": "class MyThread extends Thread { public void run() { ... } }",
          "pros": ["Direct access to thread methods"],
          "cons": ["Cannot extend other classes"]
        },
        {
          "method": "Implementing Runnable",
          "example": "class MyRunnable implements Runnable { public void run() { ... } }",
          "pros": ["Can extend other classes", "Better for task abstraction"],
          "cons": ["No direct access to thread methods"]
        },
        {
          "method": "Lambda Expression",
          "example": "Thread thread = new Thread(() -> { /* task */ });",
          "pros": ["Concise", "Functional style"],
          "cons": ["Limited to simple tasks"]
        }
      ]
    },
    {
      "id": "executors",
      "title": "Executor Framework",
      "description": "High-level threading framework for managing thread pools",
      "types": [
        {
          "type": "Fixed Thread Pool",
          "creation": "Executors.newFixedThreadPool(n)",
          "usage": "Fixed number of threads for stable, bounded resources",
          "bestPractices": [
            "Size pool based on CPU cores and task type",
            "Consider task queue size",
            "Monitor for thread leaks"
          ]
        },
        {
          "type": "Cached Thread Pool",
          "creation": "Executors.newCachedThreadPool()",
          "usage": "Variable number of threads for dynamic workloads",
          "bestPractices": [
            "Use for short-lived tasks",
            "Monitor thread creation",
            "Set appropriate keep-alive time"
          ]
        },
        {
          "type": "Scheduled Thread Pool",
          "creation": "Executors.newScheduledThreadPool(n)",
          "usage": "For scheduled or periodic tasks",
          "bestPractices": [
            "Consider task timing requirements",
            "Handle task overlap scenarios",
            "Monitor scheduling drift"
          ]
        }
      ]
    },
    {
      "id": "thread-safety",
      "title": "Thread Safety Mechanisms",
      "mechanisms": [
        {
          "type": "Synchronization",
          "methods": [
            {
              "name": "synchronized keyword",
              "usage": "synchronized method or block",
              "example": "synchronized void method() { ... }"
            },
            {
              "name": "Lock interface",
              "usage": "More flexible locking mechanisms",
              "example": "Lock lock = new ReentrantLock();"
            },
            {
              "name": "Atomic classes",
              "usage": "Lock-free thread-safe operations",
              "example": "AtomicInteger counter = new AtomicInteger();"
            }
          ]
        },
        {
          "type": "Volatile",
          "description": "Ensures visibility of changes across threads",
          "usage": "volatile keyword",
          "example": "private volatile boolean flag;"
        }
      ]
    },
    {
      "id": "concurrent-collections",
      "title": "Thread-Safe Collections",
      "collections": [
        {
          "name": "ConcurrentHashMap",
          "characteristics": [
            "Lock striping for better performance",
            "Null keys/values not allowed",
            "Atomic operations support"
          ],
          "usage": "Map<K,V> map = new ConcurrentHashMap<>();"
        },
        {
          "name": "CopyOnWriteArrayList",
          "characteristics": [
            "Thread-safe variant of ArrayList",
            "All mutative operations create a fresh copy",
            "Ideal for read-heavy scenarios"
          ],
          "usage": "List<E> list = new CopyOnWriteArrayList<>();"
        },
        {
          "name": "BlockingQueue",
          "implementations": [
            {
              "name": "ArrayBlockingQueue",
              "description": "Bounded blocking queue"
            },
            {
              "name": "LinkedBlockingQueue",
              "description": "Optionally bounded blocking queue"
            }
          ],
          "usage": "BlockingQueue<E> queue = new ArrayBlockingQueue<>(capacity);"
        }
      ]
    },
    {
      "id": "concurrency-patterns",
      "title": "Concurrency Patterns",
      "patterns": [
        {
          "name": "Producer-Consumer",
          "description": "Separate data production and consumption",
          "implementation": {
            "using": "BlockingQueue",
            "example": "BlockingQueue<Task> queue = new ArrayBlockingQueue<>(capacity);"
          }
        },
        {
          "name": "Thread Pool",
          "description": "Reuse threads for multiple tasks",
          "implementation": {
            "using": "ExecutorService",
            "example": "ExecutorService executor = Executors.newFixedThreadPool(nThreads);"
          }
        },
        {
          "name": "Future Pattern",
          "description": "Get results from asynchronous computations",
          "implementation": {
            "using": "CompletableFuture",
            "example": "CompletableFuture<Result> future = CompletableFuture.supplyAsync(() -> compute());"
          }
        }
      ]
    }
  ]
}