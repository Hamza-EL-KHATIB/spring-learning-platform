{
  "title": "Fonctionnement Interne de Java",
  "topics": [
    {
      "id": "memory-management",
      "title": "Gestion de la Mémoire (Tas vs Pile)",
      "description": "Java gère la mémoire grâce à une combinaison de mémoire de pile (pour les types de données primitifs et les références) et de mémoire de tas (pour les objets).",
      "sections": [
        {
          "type": "Mémoire de Pile",
          "characteristics": [
            "Utilisée pour l'allocation statique de mémoire",
            "Mémoire spécifique à chaque thread",
            "Stocke les références et les types de données primitifs",
            "Gérée automatiquement",
            "Allocation de mémoire plus rapide"
          ],
          "example": {
            "title": "Exemple de Mémoire de Pile",
            "code": "public void calculateSum(int a) {\n    int b = 5;\n    String name = \"John\";\n    double result = a + b;\n}"
          }
        },
        {
          "type": "Mémoire de Tas",
          "characteristics": [
            "Utilisée pour l'allocation dynamique de mémoire",
            "Partagée entre les threads",
            "Stocke les objets et les variables d'instance",
            "Collectée par le ramasse-miettes",
            "Plus grande et plus lente que la pile"
          ],
          "example": {
            "title": "Exemple de Mémoire de Tas",
            "code": "public class Memory {\n    private int[] numbers = new int[10];\n    public void createObjects() {\n        Person john = new Person(\"John\");\n    }\n}"
          }
        }
      ]
    },
    {
      "id": "oop-pillars",
      "title": "Piliers de la Programmation Orientée Objet (POO)",
      "description": "Java suit les quatre principaux principes de la POO : Encapsulation, Héritage, Polymorphisme et Abstraction.",
      "concepts": [
        {
          "name": "Encapsulation",
          "description": "L'encapsulation regroupe les données et les méthodes qui opèrent sur ces données au sein d'une seule unité, limitant l'accès à l'état interne d'un objet."
        },
        {
          "name": "Héritage",
          "description": "L'héritage permet à une classe d'acquérir les propriétés et les comportements d'une classe parente, favorisant la réutilisation du code et établissant une hiérarchie."
        },
        {
          "name": "Polymorphisme",
          "description": "Le polymorphisme permet aux méthodes d'exécuter différentes tâches en fonction de l'instance de l'objet. Il est réalisé par la surcharge et la redéfinition des méthodes."
        },
        {
          "name": "Abstraction",
          "description": "L'abstraction masque les détails de l'implémentation et expose uniquement les fonctionnalités essentielles, offrant une interface simplifiée pour des systèmes complexes."
        }
      ]
    },
    {
      "id": "platform-components",
      "title": "Composants de la Plateforme Java",
      "description": "La plateforme Java inclut le JDK, la JVM et le JRE, chacun jouant un rôle distinct dans le développement et l'exécution des applications Java.",
      "components": [
        {
          "name": "JVM (Machine Virtuelle Java)",
          "description": "Une machine abstraite qui convertit le bytecode Java en instructions spécifiques à la machine. Elle est responsable de la gestion de la mémoire, de la sécurité, et plus encore."
        },
        {
          "name": "JRE (Environnement d'Exécution Java)",
          "description": "Le JRE fournit les bibliothèques et la JVM nécessaires pour exécuter des applications Java, mais n'inclut pas d'outils de développement tels qu'un compilateur."
        },
        {
          "name": "JDK (Kit de Développement Java)",
          "description": "Le JDK inclut le JRE ainsi que des outils de développement tels que le compilateur Java (`javac`), le débogueur et le générateur de documentation (`javadoc`)."
        }
      ],
      "tools": [
        {
          "name": "javac",
          "description": "Le compilateur Java, qui convertit le code source Java en bytecode."
        },
        {
          "name": "java",
          "description": "Le lanceur d'applications Java, qui démarre la JVM et exécute le bytecode."
        },
        {
          "name": "javadoc",
          "description": "Un générateur de documentation qui crée une documentation API à partir des commentaires du code source Java."
        }
      ]
    }
  ]
}
