{
  "title": "Exceptions",
  "tags": ["java", "error-handling", "backend", "fundamentals"],
  "topics": [
    {
      "id": "core-concepts",
      "title": "Aperçu des Concepts Fondamentaux",
      "description": "La gestion des exceptions en Java fournit un mécanisme pour gérer les erreurs d'exécution, permettant au programme de continuer à s'exécuter plutôt que de s'arrêter brusquement. Cette approche structurée de la gestion des erreurs est fondamentale pour construire des applications robustes et maintenables.",
      "features": [
        {
          "name": "Hiérarchie des Exceptions",
          "purpose": "Organiser les erreurs dans une hiérarchie d'héritage systématique",
          "interviewRelevance": 5
        },
        {
          "name": "try-catch-finally",
          "purpose": "Structure de base pour la gestion des exceptions",
          "interviewRelevance": 5
        },
        {
          "name": "Exceptions Vérifiées vs Non Vérifiées",
          "purpose": "Différents types nécessitant différentes méthodes de gestion",
          "interviewRelevance": 5
        },
        {
          "name": "try-with-resources",
          "purpose": "Gestion automatique des ressources",
          "interviewRelevance": 4
        },
        {
          "name": "throw/throws",
          "purpose": "Mécanismes de propagation des exceptions",
          "interviewRelevance": 4
        },
        {
          "name": "Exceptions Personnalisées",
          "purpose": "Gestion des erreurs spécifiques à l'application",
          "interviewRelevance": 3
        },
        {
          "name": "Chaînage d'Exceptions",
          "purpose": "Préserver la cause des exceptions",
          "interviewRelevance": 3
        },
        {
          "name": "Multi-catch",
          "purpose": "Gérer plusieurs exceptions de manière similaire",
          "interviewRelevance": 3
        },
        {
          "name": "Mécaniques du Bloc finally",
          "purpose": "Garanties de nettoyage des ressources",
          "interviewRelevance": 3
        }
      ]
    },
    {
      "id": "exception-hierarchy",
      "title": "Hiérarchie des Exceptions",
      "diagram": "graph TD\n    Throwable --> Error\n    Throwable --> Exception\n    Exception --> RuntimeException\n    Exception --> CheckedException[Checked Exceptions]\n    RuntimeException --> NullPointerException\n    RuntimeException --> ArithmeticException\n    RuntimeException --> IndexOutOfBoundsException\n    CheckedException --> IOException\n    CheckedException --> SQLException\n    Error --> OutOfMemoryError\n    Error --> StackOverflowError",
      "classes": [
        {
          "name": "Throwable",
          "description": "La classe racine pour toutes les erreurs et exceptions"
        },
        {
          "name": "Error",
          "description": "Problèmes graves que l'application ne devrait pas essayer de gérer"
        },
        {
          "name": "Exception",
          "description": "Problèmes qui peuvent et devraient être gérés par l'application",
          "subclasses": [
            {
              "name": "RuntimeException",
              "description": "Exceptions qui n'ont pas besoin d'être déclarées ou capturées"
            },
            {
              "name": "Checked Exceptions",
              "description": "Exceptions qui doivent être soit capturées, soit déclarées"
            }
          ]
        }
      ]
    },
    {
      "id": "exception-types",
      "title": "Types d'Exceptions",
      "types": [
        {
          "type": "Exceptions Vérifiées (Checked Exceptions)",
          "description": "Exceptions qui doivent être soit capturées, soit déclarées",
          "properties": [
            "Doivent être soit capturées (en utilisant try-catch), soit déclarées (en utilisant throws)",
            "Représentent des conditions qu'une application raisonnable pourrait vouloir capturer",
            "Exemples: IOException, SQLException, ClassNotFoundException"
          ],
          "examples": [
            {
              "exception": "IOException",
              "description": "Opérations d'entrée/sortie échouées ou interrompues"
            },
            {
              "exception": "SQLException",
              "description": "Erreur d'accès à la base de données ou autres problèmes liés à SQL"
            },
            {
              "exception": "ClassNotFoundException",
              "description": "L'application tente de charger une classe par son nom sous forme de chaîne"
            },
            {
              "exception": "InterruptedException",
              "description": "Le thread est interrompu pendant l'exécution"
            }
          ],
          "code": [
            {
              "language": "java",
              "snippet": "try {\n    FileReader file = new FileReader(\"file.txt\");\n    // Code to read the file\n} catch (IOException e) {\n    // Handle the exception\n}"
            },
            {
              "language": "java",
              "snippet": "public void readFile() throws IOException {\n    FileReader file = new FileReader(\"file.txt\");\n    // Code to read the file\n}"
            }
          ]
        },
        {
          "type": "Exceptions Non Vérifiées (RuntimeExceptions)",
          "description": "Exceptions qui n'ont pas besoin d'être explicitement capturées ou déclarées",
          "properties": [
            "N'ont pas besoin d'être explicitement capturées ou déclarées",
            "Indiquent généralement des erreurs de programmation plutôt que des conditions externes",
            "Exemples: NullPointerException, ArrayIndexOutOfBoundsException, ArithmeticException"
          ],
          "examples": [
            {
              "exception": "NullPointerException",
              "description": "Tentative d'accès à des méthodes ou des champs d'un objet null"
            },
            {
              "exception": "ArrayIndexOutOfBoundsException",
              "description": "Tentative d'accès à un élément de tableau en dehors de ses limites"
            },
            {
              "exception": "ArithmeticException",
              "description": "Erreurs arithmétiques comme la division par zéro"
            },
            {
              "exception": "ClassCastException",
              "description": "Conversion invalide entre classes incompatibles"
            },
            {
              "exception": "IllegalArgumentException",
              "description": "Méthode recevant un argument invalide"
            },
            {
              "exception": "IllegalStateException",
              "description": "Méthode appelée à un moment illégal ou inapproprié"
            }
          ],
          "code": [
            {
              "language": "java",
              "snippet": "// This might throw ArithmeticException, but we don't need to declare it\npublic int divide(int a, int b) {\n    return a / b;  // Potential division by zero\n}"
            }
          ]
        },
        {
          "type": "Erreurs (Errors)",
          "description": "Problèmes graves au niveau de la JVM qui ne devraient pas être capturés",
          "properties": [
            "Représentent des problèmes graves au niveau de la JVM",
            "Les applications ne devraient pas essayer de les capturer ou de s'en remettre",
            "Exemples: OutOfMemoryError, StackOverflowError, VirtualMachineError"
          ],
          "examples": [
            {
              "error": "OutOfMemoryError",
              "description": "Indique que la JVM est à court de mémoire"
            },
            {
              "error": "StackOverflowError",
              "description": "Se produit lors d'une récursion trop profonde, entraînant un dépassement de la limite de la pile d'appels"
            }
          ]
        }
      ]
    },
    {
      "id": "handling-exceptions",
      "title": "Mécanismes de Gestion des Exceptions",
      "description": "Java fournit plusieurs mécanismes pour gérer les exceptions et empêcher qu'elles ne fassent planter le programme.",
      "methods": [
        {
          "id": "try-catch-finally",
          "method": "try-catch-finally",
          "description": "Structure de base pour la gestion des exceptions",
          "components": [
            {
              "name": "try",
              "purpose": "Contient le code qui pourrait lancer une exception"
            },
            {
              "name": "catch",
              "purpose": "Gère des types spécifiques d'exceptions"
            },
            {
              "name": "finally",
              "purpose": "S'exécute indépendamment de la survenue d'une exception"
            }
          ],
          "code": {
            "language": "java",
            "snippet": "try {\n    // Code that might throw an exception\n    int result = 10 / 0;\n} catch (ArithmeticException e) {\n    // Handle arithmetic exception\n    System.out.println(\"Cannot divide by zero\");\n} finally {\n    // Always executed, regardless of exception\n    System.out.println(\"This will always execute\");\n}"
          }
        },
        {
          "id": "try-with-resources",
          "method": "try-with-resources",
          "description": "Ferme automatiquement les ressources qui implémentent AutoCloseable",
          "properties": [
            "Élimine le besoin de blocs finally explicites pour le nettoyage des ressources",
            "Les ressources sont fermées dans l'ordre inverse de leur création",
            "Disponible depuis Java 7+"
          ],
          "code": {
            "language": "java",
            "snippet": "try (FileReader reader = new FileReader(\"file.txt\");\n     BufferedReader bufferedReader = new BufferedReader(reader)) {\n    // Use the resources\n    String line = bufferedReader.readLine();\n    // Resources automatically closed after this block\n} catch (IOException e) {\n    // Handle exception\n}"
          }
        },
        {
          "id": "multi-catch",
          "method": "Multi-Catch",
          "description": "Permet de gérer plusieurs types d'exceptions avec le même code",
          "properties": [
            "Les exceptions dans le même catch ne doivent pas être dans une relation de sous-classe",
            "Disponible depuis Java 7+"
          ],
          "code": {
            "language": "java",
            "snippet": "try {\n    // Code that might throw multiple exceptions\n} catch (IOException | SQLException e) {\n    // Handle both exception types the same way\n    System.out.println(\"Data access exception: \" + e.getMessage());\n}"
          }
        },
        {
          "id": "throw",
          "method": "throw",
          "description": "Utilisé pour lancer explicitement une exception",
          "properties": ["Peut lancer à la fois des exceptions intégrées et personnalisées"],
          "code": {
            "language": "java",
            "snippet": "if (age < 0) {\n    throw new IllegalArgumentException(\"Age cannot be negative\");\n}"
          }
        },
        {
          "id": "throws",
          "method": "throws",
          "description": "Utilisé dans la signature d'une méthode pour déclarer qu'elle peut lancer des exceptions vérifiées",
          "properties": ["Plusieurs exceptions peuvent être déclarées avec une liste séparée par des virgules"],
          "code": {
            "language": "java",
            "snippet": "public void readFile() throws IOException, FileNotFoundException {\n    // Method implementation\n}"
          }
        }
      ]
    },
    {
      "id": "custom-exceptions",
      "title": "Exceptions Personnalisées",
      "description": "Utilisées pour représenter des conditions d'erreur spécifiques à l'application",
      "steps": [
        "Étendre la classe d'exception appropriée (Exception pour vérifiée, RuntimeException pour non vérifiée)",
        "Implémenter des constructeurs qui chaînent au parent",
        "Ajouter des champs ou méthodes supplémentaires si nécessaire",
        "Utiliser l'exception personnalisée dans le code de l'application où nécessaire"
      ],
      "bestPractices": ["Inclure des messages descriptifs et des données pertinentes"],
      "examples": [
        {
          "type": "vérifiée",
          "name": "InsufficientFundsException",
          "code": "// Custom checked exception\npublic class InsufficientFundsException extends Exception {\n    private double amount;\n    \n    public InsufficientFundsException(String message, double amount) {\n        super(message);\n        this.amount = amount;\n    }\n    \n    public double getAmount() {\n        return amount;\n    }\n}"
        },
        {
          "type": "non vérifiée",
          "name": "UserNotFoundException",
          "code": "// Custom runtime exception\npublic class UserNotFoundException extends RuntimeException {\n    private String userId;\n    \n    public UserNotFoundException(String userId) {\n        super(\"User not found with ID: \" + userId);\n        this.userId = userId;\n    }\n    \n    public String getUserId() {\n        return userId;\n    }\n}"
        },
        {
          "type": "basique",
          "name": "InvalidInputException",
          "code": "public class InvalidInputException extends Exception {\n    public InvalidInputException(String message) {\n        super(message);\n    }\n}"
        }
      ]
    },
    {
      "id": "best-practices",
      "title": "Bonnes Pratiques pour la Gestion des Exceptions",
      "practices": [
        {
          "practice": "Capturer des exceptions spécifiques",
          "description": "Préférer capturer des types d'exceptions spécifiques plutôt que généraux",
          "code": {
            "bad": "// Bad practice\ntry {\n    // Code\n} catch (Exception e) { // Too general\n    // Handle\n}",
            "good": "// Good practice\ntry {\n    // Code\n} catch (IOException e) {\n    // Handle IO exception\n} catch (SQLException e) {\n    // Handle SQL exception\n}"
          }
        },
        {
          "practice": "Ne pas avaler les exceptions",
          "description": "Toujours fournir une gestion ou une journalisation appropriée",
          "code": {
            "bad": "// Bad practice\ntry {\n    // Code\n} catch (Exception e) {\n    // Empty catch block - exceptions are \"swallowed\"\n}",
            "good": "// Good practice\ntry {\n    // Code\n} catch (Exception e) {\n    logger.error(\"Operation failed\", e);\n    // Additional handling if needed\n}"
          }
        },
        {
          "practice": "Fermer les ressources correctement",
          "description": "Utiliser try-with-resources pour les ressources AutoCloseable"
        },
        {
          "practice": "Lancer tôt, capturer tard",
          "description": "Valider les paramètres tôt et gérer les exceptions à un niveau où vous pouvez fournir une récupération appropriée"
        },
        {
          "practice": "Inclure des messages informatifs",
          "description": "Rendre les messages d'exception clairs et spécifiques"
        },
        {
          "practice": "Encapsuler les exceptions de bas niveau",
          "description": "Préserver la cause originale des exceptions lors du lancement de nouvelles",
          "code": {
            "language": "java",
            "snippet": "try {\n    // Lower-level operation\n} catch (SQLException e) {\n    throw new DataAccessException(\"Failed to retrieve user data\", e);\n}"
          }
        },
        {
          "practice": "Documenter les exceptions",
          "description": "Utiliser @throws Javadoc pour documenter les exceptions lancées par les méthodes"
        }
      ]
    },
    {
      "id": "multi-threaded-exceptions",
      "title": "Gestion des Exceptions dans les Environnements Multi-Thread",
      "concepts": [
        {
          "name": "Exceptions de thread",
          "description": "Les exceptions dans un thread n'affectent pas les autres threads"
        },
        {
          "name": "UncaughtExceptionHandler",
          "description": "Peut être défini pour gérer les exceptions non capturées dans les threads"
        },
        {
          "name": "Gestion des exceptions CompletableFuture",
          "description": "Utiliser les méthodes exceptionally() ou handle()"
        }
      ],
      "code": [
        {
          "description": "Définir un gestionnaire par défaut pour les exceptions non capturées",
          "snippet": "Thread.setDefaultUncaughtExceptionHandler((thread, throwable) -> {\n    System.err.println(\"Unhandled exception in thread: \" + thread.getName());\n    throwable.printStackTrace();\n});"
        },
        {
          "description": "Utiliser CompletableFuture pour la gestion des exceptions",
          "snippet": "CompletableFuture.supplyAsync(() -> {\n    // Code that might throw\n    return 100 / 0;  // This will throw ArithmeticException\n}).exceptionally(ex -> {\n    System.out.println(\"Exception caught: \" + ex.getMessage());\n    return 0;  // Fallback value\n});"
        }
      ]
    },
    {
      "id": "try-catch-order",
      "title": "Ordre des Exceptions dans try-catch",
      "description": "Les blocs catch sont évalués dans l'ordre où ils apparaissent",
      "rule": "Les exceptions plus spécifiques doivent être capturées avant les plus générales",
      "code": "try {\n    // Code that might throw\n} catch (NullPointerException e) {\n    // Handle NullPointerException - more specific\n} catch (RuntimeException e) {\n    // Handle other RuntimeExceptions - more general\n} catch (Exception e) {\n    // Handle all other exceptions - most general\n}"
    },
    {
      "id": "interview-questions",
      "title": "Questions d'Entretien Fréquemment Posées sur les Exceptions",
      "questions": [
        {
          "question": "Quelle est la différence entre une instruction return dans un bloc try par rapport à un bloc finally?",
          "answer": "Si les blocs try et finally ont tous deux des instructions return, la valeur retournée par la méthode est celle du bloc finally. Le bloc finally écrase la valeur de retour du bloc try.",
          "code": "public int exampleMethod() {\n    try {\n        return 1;  // This value will be overwritten\n    } finally {\n        return 2;  // This value will be returned\n    }\n}\n// Method returns 2"
        },
        {
          "question": "Que se passe-t-il si une exception est lancée dans un bloc finally?",
          "answer": "Si une exception est lancée dans le bloc finally, elle remplacera toute exception lancée dans les blocs try ou catch. L'exception originale est perdue à moins d'être explicitement gérée dans le bloc finally."
        },
        {
          "question": "Peut-on avoir un bloc try sans catch ni finally?",
          "answer": "Avec try-with-resources (Java 7+), un bloc catch ou finally est optionnel. Cependant, dans un bloc try traditionnel, vous devez avoir soit un bloc catch, soit un bloc finally (ou les deux)."
        },
        {
          "question": "Quelle est la différence entre throw et throws?",
          "answer": "- `throw` est utilisé pour lancer explicitement une exception dans une méthode\n- `throws` est utilisé dans la déclaration de méthode pour spécifier que la méthode peut lancer certains types d'exceptions"
        },
        {
          "question": "Qu'est-ce que le bloc catch-all et est-ce une bonne pratique?",
          "answer": "Le bloc catch-all utilise `catch(Exception e)` pour capturer toutes les exceptions. Bien que pratique, ce n'est généralement pas une bonne pratique car il :\n- Capture toutes les exceptions, même celles que vous ne savez peut-être pas gérer\n- Rend difficile la distinction entre différents types d'exceptions\n- Peut masquer des erreurs de programmation qui devraient être corrigées\n\nUtilisez-le uniquement lorsque vous avez réellement besoin de capturer toutes les exceptions possibles, et évitez les blocs catch vides."
        },
        {
          "question": "Est-il possible de relancer une exception?",
          "answer": "Oui, vous pouvez relancer une exception après l'avoir capturée:",
          "code": "try {\n    // Code that might throw\n} catch (IOException e) {\n    // Log the exception\n    logger.error(\"IO error\", e);\n    \n    // Rethrow the same exception\n    throw e;\n    \n    // Or wrap it in another exception\n    // throw new ServiceException(\"Service failed\", e);\n}"
        },
        {
          "question": "Comment créer une exception personnalisée?",
          "answer": "Pour créer une exception personnalisée :\n1. Étendre la classe d'exception appropriée (Exception pour vérifiée, RuntimeException pour non vérifiée)\n2. Implémenter des constructeurs qui chaînent au parent\n3. Ajouter des champs ou méthodes supplémentaires si nécessaire",
          "code": "public class BusinessException extends Exception {\n    private String errorCode;\n    \n    public BusinessException(String message) {\n        super(message);\n    }\n    \n    public BusinessException(String message, String errorCode) {\n        super(message);\n        this.errorCode = errorCode;\n    }\n    \n    public BusinessException(String message, Throwable cause) {\n        super(message, cause);\n    }\n    \n    public String getErrorCode() {\n        return errorCode;\n    }\n}"
        },
        {
          "question": "Comment gérer les exceptions dans une application Spring Boot?",
          "answer": "Dans Spring Boot, vous pouvez gérer les exceptions en utilisant :\n\n1. **@ExceptionHandler**: Annotation au niveau de la méthode pour gérer les exceptions lancées par des méthodes de contrôleur spécifiques\n\n2. **@ControllerAdvice/@RestControllerAdvice**: Annotation au niveau de la classe pour la gestion globale des exceptions",
          "code": [
            {
              "name": "Exemple @ExceptionHandler",
              "snippet": "@Controller\npublic class UserController {\n    @ExceptionHandler(UserNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException ex) {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND)\n                .body(new ErrorResponse(ex.getMessage()));\n    }\n}"
            },
            {
              "name": "Exemple @RestControllerAdvice",
              "snippet": "@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(UserNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException ex) {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND)\n                .body(new ErrorResponse(ex.getMessage()));\n    }\n    \n    @ExceptionHandler(Exception.class)\n    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(new ErrorResponse(\"An unexpected error occurred\"));\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "id": "related-topics",
      "title": "Sujets Connexes",
      "topics": [
        "Gestion des Erreurs",
        "Fondamentaux Java",
        "Bonnes Pratiques de Journalisation",
        "CompletableFuture"
      ],
      "additionalTags": ["gestion-des-exceptions", "java-core", "entretiens"]
    }
  ]
}
